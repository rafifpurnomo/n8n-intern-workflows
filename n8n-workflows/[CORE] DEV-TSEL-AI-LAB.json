{
  "name": "[CORE] DEV-TSEL-AI-LAB",
  "nodes": [
    {
      "parameters": {
        "operation": "decode",
        "token": "={{ $json.token }}",
        "options": {}
      },
      "type": "n8n-nodes-base.jwt",
      "typeVersion": 1,
      "position": [
        -2224,
        2688
      ],
      "id": "ca54a1c9-61f6-407d-91ec-8ddfe0ed6648",
      "name": "JWT",
      "credentials": {
        "jwtAuth": {
          "id": "DIKYTiCd0YBNntFq",
          "name": "JWT Auth account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6008934a-29d4-4fa0-8da9-1d17a49351cb",
              "leftValue": "={{ $json.token }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2448,
        2688
      ],
      "id": "e4b34c9c-2c28-4a21-ae5d-bd317299f1ad",
      "name": "isToken?"
    },
    {
      "parameters": {
        "jsCode": "const now = Math.floor(Date.now() / 1000);\nconst exp = $json.payload.exp;\nreturn [\n  {\n    json: {\n      isExpired: now > exp,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2016,
        2688
      ],
      "id": "0d0bbcb7-336e-459b-8228-152d855a3def",
      "name": "validation exp token"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0a86cff5-bf94-432f-839c-ae3e232b4c28",
              "leftValue": "={{ $json.isExpired }}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1808,
        2688
      ],
      "id": "b67a5298-3813-4328-8542-9b562a6ed7e0",
      "name": "isToken exp?"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"Sesi anda telah berakhir, harap lakukan login terlebih dahulu\"\n}",
        "options": {
          "responseCode": 404
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1584,
        2944
      ],
      "id": "5a02418c-7c42-41e1-8714-1b8e770d4c22",
      "name": "Response token exp"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"harap lakukan login terlebih dahulu\"\n}",
        "options": {
          "responseCode": 400
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -2448,
        2944
      ],
      "id": "c6e283c5-7399-45fc-972b-6fcfe06a1a5e",
      "name": "Response token isEmpty"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "token",
              "value": "={{ $json.headers[\"authorization\"] ? $json.headers[\"authorization\"].replace(\"Bearer \", \"\").trim() : '' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "dc858ddd-615e-41b1-b0f6-8f9e8da855c1",
      "name": "tokenInput",
      "type": "n8n-nodes-base.set",
      "position": [
        -2464,
        2448
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "test-mode/core",
        "responseMode": "responseNode",
        "options": {
          "binaryPropertyName": "file"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2896,
        2272
      ],
      "id": "22901f6f-5659-43cd-97aa-fde0bbb3a14d",
      "name": "Webhook chatbot trigger",
      "webhookId": "e5a15a44-a6e5-4f76-b096-73ec34a96d90"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "39e39b59-708c-47b8-9627-a07c0902f1c4",
                    "leftValue": "={{ $json.output.intention }}",
                    "rightValue": "generate",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "generate"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d58f8576-6861-4c59-9af7-76d4d1464b2e",
                    "leftValue": "={{ $json.output.intention }}",
                    "rightValue": "chat",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "chat"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7711c80c-68a2-4861-a7df-7441f25f719a",
                    "leftValue": "={{ $json.output.intention }}",
                    "rightValue": "perusahaan",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "perusahaan"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -768,
        2672
      ],
      "id": "61fb71f5-df3d-448b-a84c-185b1b5a0128",
      "name": "Switch"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c965e87e-0598-4278-a7fc-95a6dd005531",
              "leftValue": "={{ $binary.file0 }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2336,
        1728
      ],
      "id": "7a1eb23a-c4fc-4249-b6af-6abcfe577b73",
      "name": "pdfExist?"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "Tugas kamu adalah mengklasifikasikan satu kalimat pesan dari pengguna menjadi dua label:\n\n1. \"intention\": \n   - \"generate\" → jika pengguna meminta untuk membuat, menghasilkan, atau merender gambar atau visual\n   - \"perusahaan\" → jika pengguna bertanya tentang informasi internal perusahaan, termasuk dokumen, kebijakan, struktur, program magang, dan hal-hal yang biasanya berasal dari sistem internal perusahaan (misalnya PDF atau knowledge base)\n   - \"chat\" → jika pengguna melakukan percakapan umum, bertanya hal umum di luar konteks perusahaan, atau mengobrol secara bebas\n\n2. \"typeData\":\n   - \"image\" → jika intention = \"generate\"\n   - \"text\" → untuk selain itu\n\nContoh:\n- \"buatkan infografis produk terbaru\" → {\"intention\": \"generate\", \"typeData\": \"image\"}\n- \"apa itu BUMN?\" → {\"intention\": \"chat\", \"typeData\": \"text\"}\n- \"kapan magang Telkomsel dimulai?\" → {\"intention\": \"perusahaan\", \"typeData\": \"text\"}\n- \"tolong buatkan ilustrasi logo AI\" → {\"intention\": \"generate\", \"typeData\": \"image\"}\n- \"siapa CEO Telkomsel?\" → {\"intention\": \"perusahaan\", \"typeData\": \"text\"}\n- \"hai apa kabar?\" → {\"intention\": \"chat\", \"typeData\": \"text\"}\n\nJawab hanya dalam format JSON valid satu baris tanpa komentar tambahan seperti:\n{\"intention\": \"perusahaan\", \"typeData\": \"text\"}\n"
            }
          ]
        }
      },
      "id": "527dda9e-ed5b-4f1b-85f7-fb5ebd8a32fc",
      "name": "inputProcessor",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        -1056,
        2672
      ],
      "typeVersion": 1.6,
      "alwaysOutputData": false,
      "executeOnce": true
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"intention\": \"chat\",\n  \"typeData\": \"text\"\n}\n",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -896,
        2960
      ],
      "id": "8e256c98-73d1-40ad-adc5-bc2332fa243e",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash-002",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1056,
        2960
      ],
      "id": "bf85dc20-aa64-4ce6-9852-10d4443222ff",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "hu7ixQhsS09un4nf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      chatInput: $input.first().json.chatInput,\n      token: $input.first().json.token\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -144,
        2528
      ],
      "id": "cb5c3039-485a-4701-a90e-c3095b2b45ba",
      "name": "chat prosses input"
    },
    {
      "parameters": {
        "options": {
          "groupMessages": true
        }
      },
      "id": "10699963-dab6-4274-9ced-ec949258aea5",
      "name": "conversationStore",
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "position": [
        224,
        2528
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.payload.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        224,
        2704
      ],
      "id": "12b782bf-56e6-444f-86d5-9cd2482f2296",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "jsCode": "const allItems = $input.all();\nconst lastItem = allItems[allItems.length - 1];\n\nif (lastItem && Array.isArray(lastItem.json.messages)) {\n  const messages = lastItem.json.messages;\n  const count = messages.length;\n\n  if (count === 0) return [{ json: { message: \"\" } }];\n\n  const extractFirstLine = (text) => {\n    if (!text) return \"\";\n    return text.split('\\n')[0].replace(/^Input from user:\\s*/, '');\n  };\n\n  const trimEndNewline = (text) => {\n    if (!text) return \"\";\n    return text.replace(/\\n+$/, '');\n  };\n\n  const selectedMessages = (count === 1) ? [messages[0]] : messages.slice(-1);\n\n  const combinedMessage = selectedMessages.map((msg, idx) => {\n    return `Message ${idx + 1}:\\nhuman: ${extractFirstLine(msg.human)}\\nai: ${trimEndNewline(msg.ai)}`;\n  }).join('\\n\\n');\n\n  return [{ json: { messages: combinedMessage } }];\n}\n\nreturn [{ json: { messages: \"\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        528,
        2528
      ],
      "id": "b3a6825d-6d78-42f8-b6f5-858f3a1d9135",
      "name": "latestContext"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df66f11f-998d-4352-84f8-411cac3fc70e",
              "name": "prompt",
              "value": "=Anda adalah asisten virtual profesional yang dirancang untuk membantu pengguna dalam percakapan umum dengan respons yang jelas, sopan, dan akurat. Fokus Anda adalah memberikan informasi atau bantuan berdasarkan pengetahuan umum, bukan pada dokumen atau sistem internal perusahaan.\n\n### 1. Aturan Interaksi\n- Gunakan bahasa Indonesia yang formal, ringkas, dan sopan dalam setiap percakapan.\n- Hindari memberikan informasi yang tidak pasti atau di luar ruang lingkup pengetahuan umum.\n- Jangan memberikan jawaban yang berasal dari sistem internal perusahaan, basis data, dokumen PDF, atau informasi bersifat rahasia.\n- Jika pertanyaan menyentuh topik internal perusahaan (seperti magang, struktur organisasi, surat tugas, dsb.), jawab dengan: \n  **\"Maaf, saya hanya dapat membantu pertanyaan umum dan tidak memiliki akses ke informasi internal perusahaan.\"**\n- Jangan menyertakan teks tambahan, disclaimer, atau klarifikasi berlebihan kecuali diminta oleh pengguna.\n\n### 2. Instruksi Tanggapan\n- Fokus pada niat pengguna dalam konteks umum: menjawab, menjelaskan, atau membantu secara informatif.\n- Jika pengguna bertanya sesuatu yang ambigu, jawab berdasarkan pemahaman terbaik Anda dan minta klarifikasi secara sopan.\n- Jaga nada positif dan profesional, serta hindari mengakhiri percakapan secara tiba-tiba.\n\n### 3. Ketentuan Teknis\n- Semua respons dihasilkan murni dari pengetahuan umum Anda.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        704,
        2528
      ],
      "id": "31346799-81c0-43ca-9b7b-32a2cbb530cd",
      "name": "chat prompt"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df66f11f-998d-4352-84f8-411cac3fc70e",
              "name": "prompt",
              "value": "={{ $json.prompt }}",
              "type": "string"
            },
            {
              "id": "389c0e92-f9bc-4c38-a4e9-47034ce5d390",
              "name": "sessionId",
              "value": "={{ $('decode JWT').item.json.payload.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        880,
        2528
      ],
      "id": "e9519b8d-e087-4afe-b119-34d785b3975d",
      "name": "build prompt"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Input dari pengguna: {{ $('chat prosses input').item.json.chatInput }}\n\n{{ $json.prompt }}",
        "options": {
          "systemMessage": "=Anda chatbot profesional untuk perusahaan yang dirancang untuk membantu pengguna dengan komunikasi yang jelas, sopan, dan akurat. Anda memberikan respons teks yang informatif dan menghasilkan gambar hanya jika diminta secara eksplisit oleh pengguna. Gunakan riwayat percakapan yang tersedia untuk menjaga konteks dan kesinambungan. Patuhi aturan perusahaan secara ketat untuk memastikan interaksi yang tepat dan aman.Anda dapat mengobrol dengan saya untuk mendapatkan jawaban dan membuat gambar khusus berdasarkan instruksi Anda.Prioritaskan pesan relevan yang paling baru jika terdapat beberapa referensi sebelumnya. Balas dalam Bahasa Indonesia untuk semua permintaan teks. Jaga agar respons tetap sependek mungkin tanpa mengurangi kejelasan atau kelancaran interaksi. Jangan memaksakan interaksi lebih dari yang diperlukan untuk memberikan jawaban yang jelas."
        }
      },
      "id": "94d97613-d275-427f-b6f8-4185d95be1e5",
      "name": "ChatCore",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1072,
        2528
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        1232,
        3584
      ],
      "id": "1667689c-0092-4c42-9cd3-8fb2215aa4be",
      "name": "Embeddings Google Gemini1",
      "credentials": {
        "googlePalmApi": {
          "id": "hu7ixQhsS09un4nf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1184,
        2752
      ],
      "id": "1a345940-71b7-442e-ac35-1823c1900ed4",
      "name": "chat core memory"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "chatInput",
              "value": "={{ $('Webhook chatbot trigger').item.json.body.chatInput }}"
            },
            {
              "name": "token",
              "value": "={{ $('tokenInput').item.json.token }}"
            }
          ]
        },
        "options": {}
      },
      "id": "1c4e92c3-d8b7-44b8-bc17-0734352a637f",
      "name": "inputSet",
      "type": "n8n-nodes-base.set",
      "position": [
        -1488,
        2672
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "file0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1280,
        384
      ],
      "id": "2da7ab6b-0870-4ff4-8bfa-58afb33f4fe5",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst fullText = items.map(item => item.json.text || \"\").join(\" \");\n\n// Cari item yang punya properti fileName\nconst fileNameItem = items.find(item => item.json.fileName);\nconst fileName = fileNameItem?.json.fileName || \"unknown.pdf\";\n\nconst chunkSize = 500;\nconst overlap = 100;\nconst chunks = [];\n\nfor (let i = 0; i < fullText.length; i += chunkSize - overlap) {\n  const chunk = fullText.slice(i, i + chunkSize);\n  chunks.push({\n    json: {\n      text: chunk,\n      metadata: {\n        source: \"shared_pdf\",\n        filename: fileName,\n        uploadedAt: new Date().toISOString()\n      }\n    }\n  });\n}\n\nreturn chunks;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        528,
        704
      ],
      "id": "65b90e80-dc5c-474b-a748-ff074fa01b9f",
      "name": "Split PDF into Chunks"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
      "typeVersion": 1,
      "position": [
        1104,
        1088
      ],
      "id": "856c48bc-606d-46b2-a450-69526070cb9f",
      "name": "Token Splitter"
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.text }}",
        "options": {}
      },
      "id": "aaa06921-a0f6-4a0d-a633-aa959e301487",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        1104,
        880
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "value": "={{ $('JWT2').first().json.payload.id }}_db_temporary",
          "mode": "id"
        },
        "options": {}
      },
      "id": "d5b434ca-8496-4aa3-948c-2f1c4903c969",
      "name": "Qdrant Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "position": [
        960,
        704
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "credentials": {
        "qdrantApi": {
          "id": "WvMXTDUfDLp2KASV",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f29be43a-50cf-42e3-b518-ea7380a3553b",
              "name": "fileName",
              "value": "={{ $binary.file0.fileName }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1280,
        640
      ],
      "id": "0e5d9b9b-67cf-41e7-982b-b445af9c63ab",
      "name": "fileName parameter"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1040,
        512
      ],
      "id": "e437873b-97af-4d95-8381-fc8bee6ed987",
      "name": "Merge PDF"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -848,
        752
      ],
      "id": "f0e938a7-05b5-444b-a899-18b57e5e824a",
      "name": "Merge wth token"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "text",
              "value": "={{ $json.text }}"
            },
            {
              "name": "source",
              "value": "={{ $json.metadata.source }}"
            },
            {
              "name": "fileName",
              "value": "={{ $json.metadata.filename }}"
            }
          ]
        },
        "options": {}
      },
      "id": "2c4c16e5-52e7-4031-9348-10b7bd34f33e",
      "name": "pdf chunks",
      "type": "n8n-nodes-base.set",
      "position": [
        704,
        704
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        960,
        864
      ],
      "id": "9525a264-5eb8-4589-badc-aea7406b6bc3",
      "name": "Embeddings Gemini Credential",
      "credentials": {
        "googlePalmApi": {
          "id": "hu7ixQhsS09un4nf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "decode",
        "token": "={{ $json.token }}",
        "options": {}
      },
      "type": "n8n-nodes-base.jwt",
      "typeVersion": 1,
      "position": [
        -1376,
        944
      ],
      "id": "18f5dc9a-384f-4bee-8bc7-2983abf04076",
      "name": "JWT2",
      "credentials": {
        "jwtAuth": {
          "id": "DIKYTiCd0YBNntFq",
          "name": "JWT Auth account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6008934a-29d4-4fa0-8da9-1d17a49351cb",
              "leftValue": "={{ $json.token }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1568,
        944
      ],
      "id": "7c4e4911-b797-41d1-bb46-d2f5d0967649",
      "name": "isToken?1"
    },
    {
      "parameters": {
        "jsCode": "const now = Math.floor(Date.now() / 1000);\nconst exp = $json.payload.exp;\nreturn [\n  {\n    json: {\n      isExpired: now > exp,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1200,
        944
      ],
      "id": "608b1d43-afd6-4e43-849d-778a94f7feb4",
      "name": "validation exp token1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0a86cff5-bf94-432f-839c-ae3e232b4c28",
              "leftValue": "={{ $json.isExpired }}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -640,
        752
      ],
      "id": "8450c1b9-2edb-46f1-b704-a8da8d0409ca",
      "name": "isToken exp?1"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"Sesi anda telah berakhir, harap lakukan login terlebih dahulu\"\n}",
        "options": {
          "responseCode": 404
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -640,
        1008
      ],
      "id": "d2b7878d-17f7-4625-8a4d-f4d17b2285b9",
      "name": "Response token exp1"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"harap lakukan login terlebih dahulu\"\n}",
        "options": {
          "responseCode": 400
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1584,
        1232
      ],
      "id": "14218ba9-42f0-48a4-8a32-35d45665e7ab",
      "name": "Response token isEmpty1"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "token",
              "value": "={{ $json.headers[\"authorization\"] ? $json.headers[\"authorization\"].replace(\"Bearer \", \"\").trim() : '' }}"
            },
            {
              "value": "={{ $binary.file0 }}"
            },
            {
              "name": "chatInput",
              "value": "={{ $json.body.chatInput }}"
            }
          ]
        },
        "options": {}
      },
      "id": "7e64eb04-d755-4697-b20a-b096eeaae06b",
      "name": "tokenInput1",
      "type": "n8n-nodes-base.set",
      "position": [
        -1584,
        704
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "return{\n  \"status\": \"no pdf\"\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2336,
        2032
      ],
      "id": "688e56d1-9c6f-4323-aae3-317f9c083760",
      "name": "return if pdf not exist"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      success: true,\n      status: 200,\n      chatInput: $json.chatInput,\n      response: JSON.stringify($json.output)\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        2528
      ],
      "id": "ebf3dc24-26ad-4ab5-a68b-863326f293d8",
      "name": "response code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4e04fec4-441e-45f7-acea-0017a4b5c104",
              "name": "model",
              "type": "string",
              "value": "flux"
            },
            {
              "id": "aa80cd68-1c82-4032-b1d7-e098856eec38",
              "name": "width",
              "type": "string",
              "value": "1080"
            },
            {
              "id": "da6d305f-aece-49bd-ae02-52df59915c60",
              "name": "height",
              "type": "string",
              "value": "1920"
            }
          ]
        },
        "options": {}
      },
      "id": "5fef3f7c-c610-4afe-8a0d-7fc5f2cfe11d",
      "name": "Fields - Set Values",
      "type": "n8n-nodes-base.set",
      "position": [
        -48,
        1920
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "jsCode": "function cleanAndExtractJSON(response) {\n    try {\n        const result = {\n            image_prompt: []\n        };\n\n        const lines = response.split('\\n');\n        let currentPrompt = '';\n\n        for (const line of lines) {\n            if (line.includes('\"prompt\":')) {\n                if (currentPrompt) {\n                    result.image_prompt.push(currentPrompt.trim());\n                }\n                currentPrompt = line.split('\"prompt\":')[1].trim();\n            }\n        }\n\n        if (currentPrompt) {\n            result.image_prompt.push(currentPrompt.trim());\n        }\n\n        return { json: result };\n        \n    } catch (error) {\n        return { \n            json: {\n                image_prompt: []\n            }\n        };\n    }\n}\n\nconst response = $input.first().json.output;\nreturn cleanAndExtractJSON(response);"
      },
      "id": "90b160c4-6465-4107-9d19-4d68b87fea77",
      "name": "Code - Clean Json",
      "type": "n8n-nodes-base.code",
      "position": [
        592,
        1920
      ],
      "executeOnce": false,
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "return $input.first().json.image_prompt.map(prompt => ({\n  json: {\n    body: {\n      prompt: prompt,\n  \"image_size\": {\n    \"width\": $('Fields - Set Values').first().json.width,\n    \"height\": $('Fields - Set Values').first().json.height\n  },\n  \"num_inference_steps\": 12,\n  \"guidance_scale\": 3.5,\n  \"num_images\": 1,\n  \"enable_safety_checker\": true,\n}\n    }\n  }\n));"
      },
      "id": "42e26a75-5abe-4bcc-a7a1-4586e56cdd07",
      "name": "Code - Get Prompt",
      "type": "n8n-nodes-base.code",
      "position": [
        768,
        1920
      ],
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "=https://image.pollinations.ai/prompt/ {{ $('Code - Get Prompt').item.json.body.prompt }}",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "={\n  \"width\": {{ $('Fields - Set Values').item.json.width }},\n  \"height\": {{ $('Fields - Set Values').item.json.height }},\n  \"model\": \"{{ $('Fields - Set Values').item.json.model }}\",\n  \"seed\": 42,\n  \"nologo\": true\n}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "954c27a1-5adb-4906-8646-4f8052ec8146",
      "name": "HTTP Request - Create Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1264,
        1920
      ],
      "retryOnFail": true,
      "typeVersion": 4.2,
      "alwaysOutputData": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "jsCode": "for (let i = 0; i < items.length; i++) {\n  items[i].json.fileName = `images_${(i + 1).toString().padStart(3, '0')}.png`;\n}\nreturn items;"
      },
      "id": "8b73ed96-fc48-454f-8111-1635ba1ffaec",
      "name": "Code - Set Filename",
      "type": "n8n-nodes-base.code",
      "position": [
        928,
        1920
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('img prompt set').item.json.chatInput }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an AI image‑prompt creation expert. Please create a post using the following JSON format:\nAI Image Generation Prompt Guidelines:\nObjective\nCreate highly realistic, high‐quality images\nEnsure the image content faithfully conveys the spirit of the original text\nIntegrate short text (10–20 characters) naturally into the image\nMaintain consistency and professionalism\n\nStandard Prompt Structure\n[Main Scene] | [Key Elements] | [Text Integration] | [Lighting & Atmosphere] | [Technical Parameters] | [Style Parameters]\n\nComponent Breakdown\n1. Main Scene (Weight ::8)\nDescribe the primary setting in line with the content.\nExamples:\nTech news: “modern tech office setting, minimalist workspace”\nEconomy news: “professional financial district, corporate environment”\nEducation news: “modern classroom, advanced learning environment”\n\n2. Key Elements (Weight ::8)\nList the main visual elements required.\nExamples:\n“large HD display showing text ‘AI Ethics’ in modern typography”\n“professional people in business attire discussing around interactive screen”\n“detailed infographic elements floating in augmented reality style”\n\n3. Text Integration (Weight ::7)\nHow to display text within the image:\ntext elements | elegant typography, clear readable text, integrated naturally into scene ::7\n\n4. Lighting & Atmosphere (Weight ::7)\nlighting | cinematic dramatic lighting, natural ambient light, professional studio setup ::7\nbackground | depth of field blur, clean professional environment ::6\n\n5. Technical Parameters\nparameters | 8k resolution, hyperrealistic, photorealistic quality, octane render, cinematic composition --ar 16:9\nsettings | sharp focus, high detail, professional photography --s 1000 --q 2\nComplete Examples\nExample 1: AI Ethics News\nprofessional tech conference room | large display showing \"AI Ethics Now\" in modern typography, group of diverse executives in discussion ::8 | clean modern workspace, glass walls, tech atmosphere ::7 | cinematic lighting, natural window light ::7 | 8k resolution, hyperrealistic quality, octane render --ar 16:9 --s 1000 --q 2\nExample 2: Financial Market News\nmodern stock exchange environment | giant LED wall showing \"Market Alert\" in bold typography, professional traders in action ::8 | dynamic financial data visualization, sleek modern interior ::7 | dramatic lighting, blue-tinted atmosphere ::7 | 8k resolution, photorealistic quality --ar 16:9 --s 1000 --q 2\n\nAdditional Parameters\n--chaos [0–100]: Adjust randomness\n--stylize [0–1000]: Degree of stylization\n--seed [number]: Ensure consistency across generations\n--niji: Optimized for Asian‐style aesthetics\n--v 5.2: Use the latest model version\n\nImportant Notes\nText in Image\nKeep it short and legible\nUse professional fonts\nIntegrate naturally into the scene\n\nComposition\nFollow the rule of thirds\nEnsure a clear focal point\nBalance text and imagery\n\nColor\nMatch a professional tone\nProvide sufficient contrast for readability\nMaintain visual consistency\n\nTechnical Details\nAlways use high resolution (8k)\nEnsure professional lighting\nOptimize for sharpness and detail\n\nCommon Pitfalls to Avoid\nOverly generic prompts\nMissing text‐integration guidance\nFailing to specify composition rules\nOmitting key technical parameters\n\nThe structure is:\n{\n  prompt_image {prompt : \"\" , ...}\n}"
        }
      },
      "id": "1411d0cc-79b1-4f2e-ae1c-bc8db0566f29",
      "name": "AI Agent - Create Image From Prompt",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        144,
        1920
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "content": "# 🤖 AI Core\n\nPerintah dan pengaturan yang sebelumnya kita buat akan dikirim ke Model Pembuatan Gambar. model bisa berbagai macam tergantung kebutuhan pengguna",
        "height": 740,
        "width": 460,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -64,
        1632
      ],
      "id": "80838fb7-1424-42f3-b5a2-13995ef97b11",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# 🧹 Cleaning Prompt\n\nSetelah prompt berhasil dihasilkan oleh AI, workflow melanjutkan ke tahap pembersihan dan penyusunan ulang data. \n\n1. Node Code - Clean: Json digunakan untuk mengekstrak bagian prompt yang relevan dari respon AI dalam format JSON yang bersih dan terstruktur.\n2. Node Code - Get Prompt: membentuk struktur body permintaan yang akan dikirim ke API image generator.\n3. node Code - Set Filename: secara otomatis menetapkan nama file untuk gambar yang dihasilkan dengan format berurutan.",
        "height": 740,
        "width": 520,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        544,
        1632
      ],
      "id": "989d81a1-f4b6-40e6-9617-fee194f72895",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "# 🏁 Final Step\n\nSetelah prompt dibersihkan sistem akan memanggil API pembuatan gambar\n\nSetelah gambar sudah selesai di proses, sistem akan memberikan nama file & respon menggunakan format yang berurutan. Gambar kemudian dikirim kembali ke pengguna melalui node Respond to Webhook sebagai respons akhir dari proses generate gambar.",
        "height": 740,
        "width": 520,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1168,
        1632
      ],
      "id": "ce7baab1-3673-4464-a727-8612bb5719e0",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {
          "maxOutputTokens": 65536,
          "temperature": 0.5,
          "topK": 40,
          "topP": 1,
          "safetySettings": {
            "values": [
              {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_NONE"
              },
              {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_NONE"
              },
              {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_NONE"
              },
              {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_NONE"
              }
            ]
          }
        }
      },
      "id": "32861f3a-6191-4dd9-93f2-7e6b72960c60",
      "name": "Google Gemini Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        144,
        2128
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "hu7ixQhsS09un4nf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "decode",
        "token": "={{ $json.token }}",
        "options": {}
      },
      "type": "n8n-nodes-base.jwt",
      "typeVersion": 1,
      "position": [
        32,
        2528
      ],
      "id": "d9a8e767-96d1-49d5-81b8-a9c99f64c9ff",
      "name": "decode JWT",
      "credentials": {
        "jwtAuth": {
          "id": "DIKYTiCd0YBNntFq",
          "name": "JWT Auth account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"succes\": {{ $json.success }},\n  \"status\": {{ $json.status }},\n  \"chatInput\": \"{{ $('Webhook chatbot trigger').item.json.body.chatInput }}\",\n  \"response\": {{ $json.response }}\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1504,
        2528
      ],
      "id": "940e4b18-4a35-417c-a6ed-61286a8304d3",
      "name": "Chat Respond"
    },
    {
      "parameters": {
        "respondWith": "binary",
        "responseDataSource": "set",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1488,
        1920
      ],
      "id": "54cf9f3b-803d-4558-967c-cc88dd61df31",
      "name": "Img Respond"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "chatInput",
              "value": "={{ $('Webhook chatbot trigger').item.json.body.chatInput }}"
            },
            {
              "name": "token",
              "value": "={{ $('tokenInput').item.json.token }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e6b82a68-3082-40a5-b73b-cb8232945ea6",
      "name": "chat prompt set",
      "type": "n8n-nodes-base.set",
      "position": [
        -368,
        2528
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "chatInput",
              "value": "={{ $('Webhook chatbot trigger').item.json.body.chatInput }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e4281ca8-1e08-4f30-b571-1355359f1f22",
      "name": "img prompt set",
      "type": "n8n-nodes-base.set",
      "position": [
        -368,
        1920
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "={{ $('chat prompt set1').item.json.chatInput }}",
        "qdrantCollection": {
          "__rl": true,
          "value": "learning_based",
          "mode": "list",
          "cachedResultName": "learning_based"
        },
        "topK": 5,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.3,
      "position": [
        1232,
        3440
      ],
      "id": "83c6fec2-66eb-4e04-b397-0477b9b8b2e4",
      "name": "learning-base-qdrant",
      "credentials": {
        "qdrantApi": {
          "id": "WvMXTDUfDLp2KASV",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash-002",
        "options": {
          "temperature": 0.2,
          "topP": 0.7
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1072,
        2752
      ],
      "id": "c41889bf-a62a-4878-9174-0c29356c7762",
      "name": "Google Gemini ChatCore",
      "credentials": {
        "googlePalmApi": {
          "id": "hu7ixQhsS09un4nf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      chatInput: $input.first().json.chatInput,\n      token: $input.first().json.token\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -96,
        3072
      ],
      "id": "7bf413b2-a0e2-498b-9f68-9a224ba2431f",
      "name": "chat prosses input1"
    },
    {
      "parameters": {
        "options": {
          "groupMessages": true
        }
      },
      "id": "fe14be7e-f786-4951-a26a-ac90bef2f1cd",
      "name": "conversationStore1",
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "position": [
        272,
        3072
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.payload.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        272,
        3248
      ],
      "id": "a7959019-3e74-4aa8-92c3-15ef26c75e7e",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "jsCode": "const allItems = $input.all();\nconst lastItem = allItems[allItems.length - 1];\n\nif (lastItem && Array.isArray(lastItem.json.messages)) {\n  const messages = lastItem.json.messages;\n  const count = messages.length;\n\n  if (count === 0) return [{ json: { message: \"\" } }];\n\n  const extractFirstLine = (text) => {\n    if (!text) return \"\";\n    return text.split('\\n')[0].replace(/^Input from user:\\s*/, '');\n  };\n\n  const trimEndNewline = (text) => {\n    if (!text) return \"\";\n    return text.replace(/\\n+$/, '');\n  };\n\n  const selectedMessages = (count === 1) ? [messages[0]] : messages.slice(-1);\n\n  const combinedMessage = selectedMessages.map((msg, idx) => {\n    return `Message ${idx + 1}:\\nhuman: ${extractFirstLine(msg.human)}\\nai: ${trimEndNewline(msg.ai)}`;\n  }).join('\\n\\n');\n\n  return [{ json: { messages: combinedMessage } }];\n}\n\nreturn [{ json: { messages: \"\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        3072
      ],
      "id": "db9e5e53-84fb-474f-8655-11754d7370e7",
      "name": "latestContext1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df66f11f-998d-4352-84f8-411cac3fc70e",
              "name": "prompt",
              "value": "=Anda adalah asisten AI profesional yang WAJIB menggunakan tools jika tersedia. Gunakan alat/tools untuk menjawab pertanyaan pengguna, terutama yang menyangkut informasi perusahaan atau berdasarkan dokumen. Jangan menjawab berdasarkan pengetahuan umum, kecuali jika tools tidak memberikan hasil atau confidence rendah.\n\nJika hasil dari tools tidak ditemukan atau tidak relevan, jawab dengan kalimat:\n**\"Maaf saya tidak bisa menemukan jawaban dari dokumen.\"**\n\nPerhatikan aturan berikut:\n- Gunakan Bahasa Indonesia formal.\n- Jangan mengabaikan tools, gunakan mode `tool-calling` untuk semua pertanyaan.\n- Gunakan konteks percakapan terbaru jika tersedia.\n- Jangan mengarang jawaban dari pengetahuan umum.\n\nIkuti instruksi pengguna secara akurat dan patuhi batasan data internal.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        752,
        3072
      ],
      "id": "9d4e3798-f9e3-4fd2-890d-16a5e6812386",
      "name": "chat prompt1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df66f11f-998d-4352-84f8-411cac3fc70e",
              "name": "prompt",
              "value": "={{ $json.prompt }}",
              "type": "string"
            },
            {
              "id": "bbde3029-3cdf-432f-83fe-109bcd3059b5",
              "name": "sessionId",
              "value": "={{ $('decode JWT1').item.json.payload.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        928,
        3072
      ],
      "id": "da504834-2332-44a7-af8a-c7fc9afb5f00",
      "name": "build prompt1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Input dari pengguna: {{ $('chat prosses input1').item.json.chatInput }}",
        "options": {
          "systemMessage": "={{ $json.prompt }}",
          "returnIntermediateSteps": true
        }
      },
      "id": "1fe44c6c-b735-4d70-b1c1-6880c3faac33",
      "name": "ChatCore1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1152,
        3072
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1264,
        3280
      ],
      "id": "b565e766-a895-411b-acb0-5186359d7cb4",
      "name": "chat core memory1"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      success: true,\n      status: 200,\n      chatInput: $json.chatInput,\n      response: JSON.stringify($json.output)\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        3072
      ],
      "id": "fb609134-91c4-44fb-850a-e5067e21cb4f",
      "name": "response code1"
    },
    {
      "parameters": {
        "operation": "decode",
        "token": "={{ $json.token }}",
        "options": {}
      },
      "type": "n8n-nodes-base.jwt",
      "typeVersion": 1,
      "position": [
        64,
        3072
      ],
      "id": "82980597-cc85-477d-b4e0-d4a247758cb5",
      "name": "decode JWT1",
      "credentials": {
        "jwtAuth": {
          "id": "DIKYTiCd0YBNntFq",
          "name": "JWT Auth account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"succes\": {{ $json.success }},\n  \"status\": {{ $json.status }},\n  \"chatInput\": \"{{ $('Webhook chatbot trigger').item.json.body.chatInput }}\",\n  \"response\": {{ $json.response }}\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1584,
        3072
      ],
      "id": "23768030-f34f-4e5e-b892-ec592ade111a",
      "name": "Chat Respond1"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "chatInput",
              "value": "={{ $('Webhook chatbot trigger').item.json.body.chatInput }}"
            },
            {
              "name": "token",
              "value": "={{ $('tokenInput').item.json.token }}"
            }
          ]
        },
        "options": {}
      },
      "id": "f7677aae-d157-4c0f-8863-9699c1d6949b",
      "name": "chat prompt set1",
      "type": "n8n-nodes-base.set",
      "position": [
        -320,
        3072
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a5e94952-004b-4d67-90ff-fce5e6e2110d",
              "leftValue": "={{ $json.result.exists }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -224,
        320
      ],
      "id": "9a888a89-4587-4e7b-ba0e-bff44931a354",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "collectionExists",
        "collectionName": "={{ $('JWT2').first().json.payload.id }}_db_temporary",
        "requestOptions": {}
      },
      "type": "n8n-nodes-qdrant.qdrant",
      "typeVersion": 1,
      "position": [
        -400,
        320
      ],
      "id": "b3c17ad7-4ed9-413e-ae6d-164164e40b29",
      "name": "Check Collection Exists",
      "executeOnce": false,
      "credentials": {
        "qdrantRestApi": {
          "id": "TIJUGlBtMaBZT6mZ",
          "name": "Qdrant account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst fullText = items.map(item => item.json.text || \"\").join(\" \");\n\n// Cari item yang punya properti fileName\nconst fileNameItem = items.find(item => item.json.fileName);\nconst fileName = fileNameItem?.json.fileName || \"unknown.pdf\";\n\nconst chunkSize = 500;\nconst overlap = 100;\nconst chunks = [];\n\nfor (let i = 0; i < fullText.length; i += chunkSize - overlap) {\n  const chunk = fullText.slice(i, i + chunkSize);\n  chunks.push({\n    json: {\n      text: chunk,\n      metadata: {\n        source: \"shared_pdf\",\n        filename: fileName,\n        uploadedAt: new Date().toISOString()\n      }\n    }\n  });\n}\n\nreturn chunks;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        0
      ],
      "id": "164ae77e-34b3-4686-ae57-84deee59405f",
      "name": "Split PDF into Chunks1"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "text",
              "value": "={{ $json.text }}"
            },
            {
              "name": "source",
              "value": "={{ $json.metadata.source }}"
            },
            {
              "name": "fileName",
              "value": "={{ $json.metadata.filename }}"
            }
          ]
        },
        "options": {
          "dotNotation": false
        }
      },
      "id": "8be5bc51-a941-4893-ac1f-37cbd141f652",
      "name": "pdf chunks1",
      "type": "n8n-nodes-base.set",
      "position": [
        1344,
        0
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "text",
              "value": "={{ $('Merge wth token').item.json.text }}"
            },
            {
              "name": "fileName",
              "value": "={{ $('Merge wth token').item.json.info.Title }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e5e07de2-de92-479b-b4f8-a00b2a3964ad",
      "name": "get pdf text",
      "type": "n8n-nodes-base.set",
      "position": [
        352,
        704
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "text",
              "value": "={{ $('Merge wth token').first().json.text }}"
            },
            {
              "name": "fileName",
              "value": "={{ $('Merge wth token').item.json.info.Title }}"
            }
          ]
        },
        "options": {}
      },
      "id": "596684b4-261c-407a-8579-e4beeab9f7cc",
      "name": "get pdf text1",
      "type": "n8n-nodes-base.set",
      "position": [
        768,
        0
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "options": {
          "groupMessages": true
        }
      },
      "id": "3b831e0c-cf54-456a-887e-fc7669903042",
      "name": "conversationStore2",
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "position": [
        1552,
        704
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1552,
        880
      ],
      "id": "f449e06a-f893-4948-ab48-81e7195e4f14",
      "name": "Simple Memory2"
    },
    {
      "parameters": {
        "jsCode": "const allItems = $input.all();\nconst lastItem = allItems[allItems.length - 1];\n\nif (lastItem && Array.isArray(lastItem.json.messages)) {\n  const messages = lastItem.json.messages;\n  const count = messages.length;\n\n  if (count === 0) return [{ json: { message: \"\" } }];\n\n  const extractFirstLine = (text) => {\n    if (!text) return \"\";\n    return text.split('\\n')[0].replace(/^Input from user:\\s*/, '');\n  };\n\n  const trimEndNewline = (text) => {\n    if (!text) return \"\";\n    return text.replace(/\\n+$/, '');\n  };\n\n  const selectedMessages = (count === 1) ? [messages[0]] : messages.slice(-1);\n\n  const combinedMessage = selectedMessages.map((msg, idx) => {\n    return `Message ${idx + 1}:\\nhuman: ${extractFirstLine(msg.human)}\\nai: ${trimEndNewline(msg.ai)}`;\n  }).join('\\n\\n');\n\n  return [{ json: { messages: combinedMessage } }];\n}\n\nreturn [{ json: { messages: \"\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1840,
        704
      ],
      "id": "6e2a51ed-692e-4cc9-b2a1-a4ce98d4b67f",
      "name": "latestContext2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df66f11f-998d-4352-84f8-411cac3fc70e",
              "name": "prompt",
              "value": "=Anda adalah asisten AI profesional yang WAJIB menggunakan tools jika tersedia. Gunakan alat/tools untuk menjawab pertanyaan pengguna, terutama yang menyangkut informasi perusahaan atau berdasarkan dokumen. Jangan menjawab berdasarkan pengetahuan umum, kecuali jika tools tidak memberikan hasil atau confidence rendah.\n\nJika hasil dari tools tidak ditemukan atau tidak relevan, jawab dengan kalimat:\n**\"Maaf saya tidak bisa menemukan jawaban dari dokumen.\"**\n\nPerhatikan aturan berikut:\n- Gunakan Bahasa Indonesia formal.\n- Jangan mengabaikan tools, gunakan mode `tool-calling` untuk semua pertanyaan.\n- Gunakan konteks percakapan terbaru jika tersedia.\n- Jangan mengarang jawaban dari pengetahuan umum.\n\nIkuti instruksi pengguna secara akurat dan patuhi batasan data internal.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2032,
        704
      ],
      "id": "1aa2ed80-75fd-49f0-8679-edd752d39ca0",
      "name": "chat prompt2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df66f11f-998d-4352-84f8-411cac3fc70e",
              "name": "prompt",
              "value": "={{ $json.prompt }}",
              "type": "string"
            },
            {
              "id": "389c0e92-f9bc-4c38-a4e9-47034ce5d390",
              "name": "sessionId",
              "value": "={{ $('JWT2').first().json.payload.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2208,
        704
      ],
      "id": "0523ade1-959a-4be6-bd17-49dbe04658cb",
      "name": "build prompt2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Input dari pengguna: {{ $('chat prompt set2').first().json.chatInput }}",
        "options": {
          "systemMessage": "={{ $json.prompt }}",
          "maxIterations": 10,
          "returnIntermediateSteps": true
        }
      },
      "id": "4deeb841-c42f-47e0-89fc-625126b535ae",
      "name": "ChatCore2",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        2384,
        704
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        2448,
        928
      ],
      "id": "93041cbd-5bc2-4875-baac-861aa1bf4f86",
      "name": "chat core memory2"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      success: true,\n      status: 200,\n      chatInput: $json.chatInput,\n      response: JSON.stringify($json.output)\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2688,
        704
      ],
      "id": "2a605128-b7c0-4ad0-827d-edcef28b9038",
      "name": "response code2"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"succes\": {{ $json.success }},\n  \"status\": {{ $json.status }},\n  \"chatInput\": \"{{ $('Webhook chatbot trigger').first().json.body.chatInput }}\",\n  \"response\": {{ $json.response }}\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        2848,
        704
      ],
      "id": "d171e71c-7592-46c2-83b1-0fd390019020",
      "name": "Chat Respond2"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "chatInput",
              "value": "={{ $('tokenInput1').first().json.chatInput }}"
            },
            {
              "name": "sessionId",
              "value": "={{ $('JWT2').first().json.payload.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "eacb013a-fd67-4d30-a65a-4d11dcecac46",
      "name": "chat prompt set2",
      "type": "n8n-nodes-base.set",
      "position": [
        1360,
        704
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        2560,
        1088
      ],
      "id": "ed81c842-5294-4a06-8e6f-2741fb1ced89",
      "name": "Embeddings Google Gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "hu7ixQhsS09un4nf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Gunakan tools ini untuk mencari informasi yang relevan dari dokumen yang telah diunggah pengguna. Tools ini sangat penting untuk menjawab pertanyaan berdasarkan konten dokumen.",
        "qdrantCollection": {
          "__rl": true,
          "value": "={{ $('JWT2').first().json.payload.id }}_db_temporary",
          "mode": "id"
        },
        "topK": 5,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.3,
      "position": [
        2560,
        928
      ],
      "id": "568e293b-ced6-4ea6-976f-9ad8b2f284be",
      "name": "sessional qdrant db",
      "credentials": {
        "qdrantApi": {
          "id": "WvMXTDUfDLp2KASV",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
      "typeVersion": 1,
      "position": [
        1728,
        384
      ],
      "id": "29158db8-970a-4dea-9c7a-6bc4525043da",
      "name": "Token Splitter2"
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.text }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "fileName",
                "value": "={{ $('get pdf text1').first().json.fileName }}"
              },
              {
                "name": "source",
                "value": "={{ $('Split PDF into Chunks1').item.json.metadata.source }}"
              },
              {
                "name": "uploadedAt",
                "value": "={{ $('Split PDF into Chunks1').item.json.metadata.uploadedAt }}"
              }
            ]
          }
        }
      },
      "id": "02fbf344-4498-47d2-b901-0cf0107a74f4",
      "name": "Default Data Loader2",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        1728,
        192
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "value": "={{ $('JWT2').first().json.payload.id }}_db_temporary",
          "mode": "id"
        },
        "options": {}
      },
      "id": "e4f5eabb-8e67-4d24-a780-bd860a299db5",
      "name": "Qdrant Vector Store2",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "position": [
        1584,
        0
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "credentials": {
        "qdrantApi": {
          "id": "WvMXTDUfDLp2KASV",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        1584,
        160
      ],
      "id": "85a87345-1897-4ac9-a123-e042aefd8bde",
      "name": "Embeddings Gemini Credential2",
      "credentials": {
        "googlePalmApi": {
          "id": "hu7ixQhsS09un4nf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "groupMessages": true
        }
      },
      "id": "ba1b2a93-731f-4886-afe1-78cb0e95f097",
      "name": "conversationStore3",
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "position": [
        2208,
        0
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        2208,
        192
      ],
      "id": "6ad2a333-e10c-4a47-b62f-3bf63929ad8a",
      "name": "Simple Memory3"
    },
    {
      "parameters": {
        "jsCode": "const allItems = $input.all();\nconst lastItem = allItems[allItems.length - 1];\n\nif (lastItem && Array.isArray(lastItem.json.messages)) {\n  const messages = lastItem.json.messages;\n  const count = messages.length;\n\n  if (count === 0) return [{ json: { message: \"\" } }];\n\n  const extractFirstLine = (text) => {\n    if (!text) return \"\";\n    return text.split('\\n')[0].replace(/^Input from user:\\s*/, '');\n  };\n\n  const trimEndNewline = (text) => {\n    if (!text) return \"\";\n    return text.replace(/\\n+$/, '');\n  };\n\n  const selectedMessages = (count === 1) ? [messages[0]] : messages.slice(-1);\n\n  const combinedMessage = selectedMessages.map((msg, idx) => {\n    return `Message ${idx + 1}:\\nhuman: ${extractFirstLine(msg.human)}\\nai: ${trimEndNewline(msg.ai)}`;\n  }).join('\\n\\n');\n\n  return [{ json: { messages: combinedMessage } }];\n}\n\nreturn [{ json: { messages: \"\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2512,
        0
      ],
      "id": "0a8634d6-a9f2-49a7-8a52-17de9b63c5cf",
      "name": "latestContext3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df66f11f-998d-4352-84f8-411cac3fc70e",
              "name": "prompt",
              "value": "=Anda adalah asisten AI profesional yang WAJIB menggunakan tools jika tersedia. Gunakan alat/tools untuk menjawab pertanyaan pengguna, terutama yang menyangkut informasi perusahaan atau berdasarkan dokumen. Jangan menjawab berdasarkan pengetahuan umum, kecuali jika tools tidak memberikan hasil atau confidence rendah.\n\nJika hasil dari tools tidak ditemukan atau tidak relevan, jawab dengan kalimat:\n**\"Maaf saya tidak bisa menemukan jawaban dari dokumen.\"**\n\nPerhatikan aturan berikut:\n- Gunakan Bahasa Indonesia formal.\n- Jangan mengabaikan tools, gunakan mode `tool-calling` untuk semua pertanyaan.\n- Gunakan konteks percakapan terbaru jika tersedia.\n- Jangan mengarang jawaban dari pengetahuan umum.\n\nIkuti instruksi pengguna secara akurat dan patuhi batasan data internal.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2688,
        0
      ],
      "id": "ed368a0e-d87e-46dd-be98-22d72365d20f",
      "name": "chat prompt3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df66f11f-998d-4352-84f8-411cac3fc70e",
              "name": "prompt",
              "value": "={{ $json.prompt }}",
              "type": "string"
            },
            {
              "id": "389c0e92-f9bc-4c38-a4e9-47034ce5d390",
              "name": "sessionId",
              "value": "={{ $('JWT2').first().json.payload.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2864,
        0
      ],
      "id": "0185ff5d-1199-43cb-a9b8-e1ace122bd28",
      "name": "build prompt3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Input dari pengguna: {{ $('chat prompt set3').first().json.chatInput }}",
        "options": {
          "systemMessage": "={{ $json.prompt }}"
        }
      },
      "id": "8afdaa31-7d43-45af-817a-0b69cf1dfa7e",
      "name": "ChatCore3",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        3040,
        0
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        3072,
        224
      ],
      "id": "ffcb3316-36bb-4efa-84c1-b5c6ebb51dfd",
      "name": "chat core memory3"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      success: true,\n      status: 200,\n      chatInput: $json.chatInput,\n      response: JSON.stringify($json.output)\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3344,
        0
      ],
      "id": "5fe0845a-e248-4319-ac2d-e3052b757d62",
      "name": "response code3"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"succes\": {{ $json.success }},\n  \"status\": {{ $json.status }},\n  \"chatInput\": \"{{ $('Webhook chatbot trigger').first().json.body.chatInput }}\",\n  \"response\": {{ $json.response }}\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        3504,
        0
      ],
      "id": "8adace43-de9b-4f36-b41e-c0ee047fa304",
      "name": "Chat Respond3"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "chatInput",
              "value": "={{ $('tokenInput1').first().json.chatInput }}"
            },
            {
              "name": "sessionId",
              "value": "={{ $('JWT2').first().json.payload.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "1de48485-6f96-4545-82e8-5a94a568241f",
      "name": "chat prompt set3",
      "type": "n8n-nodes-base.set",
      "position": [
        2032,
        0
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        3232,
        384
      ],
      "id": "e5441ae3-8af3-402f-a347-208ffd8715aa",
      "name": "Embeddings Google Gemini2",
      "credentials": {
        "googlePalmApi": {
          "id": "hu7ixQhsS09un4nf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        2944,
        224
      ],
      "id": "0848125f-dd0e-475b-9b27-750a5b82c795",
      "name": "Groq Chat Model1",
      "credentials": {
        "groqApi": {
          "id": "TUbtLRFNULuqqBte",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "={{ $('chat prompt set3').first().json.chatInput }}",
        "qdrantCollection": {
          "__rl": true,
          "value": "={{ $('JWT2').first().json.payload.id }}_db_temporary",
          "mode": "id"
        },
        "topK": 5,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.3,
      "position": [
        3232,
        224
      ],
      "id": "a8577835-e5fb-4acb-9c1e-926349279d46",
      "name": "sessional qdrant db3",
      "credentials": {
        "qdrantApi": {
          "id": "WvMXTDUfDLp2KASV",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1152,
        3280
      ],
      "id": "950524c4-5ab0-4eec-a139-b503d4c4184a",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "TUbtLRFNULuqqBte",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -896,
        3120
      ],
      "id": "ab298fab-bece-4a19-8d09-8d49cc875d8f",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "hu7ixQhsS09un4nf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        2320,
        928
      ],
      "id": "4a133cc2-ffe5-451b-8925-ef818ccb191a",
      "name": "Groq Chat Model2",
      "credentials": {
        "groqApi": {
          "id": "TUbtLRFNULuqqBte",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getCollection",
        "collectionName": {
          "__rl": true,
          "value": "={{ $('JWT2').item.json.payload.id }}_db_temporary",
          "mode": "name"
        },
        "requestOptions": {}
      },
      "type": "n8n-nodes-qdrant.qdrant",
      "typeVersion": 1,
      "position": [
        -16,
        -448
      ],
      "id": "c9ba23b1-90c3-4aac-b5e1-de107858ec61",
      "name": "Get Collection",
      "credentials": {
        "qdrantRestApi": {
          "id": "TIJUGlBtMaBZT6mZ",
          "name": "Qdrant account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "resource": "point",
        "operation": "scrollPoints",
        "collectionName": {
          "__rl": true,
          "value": "={{ $('JWT2').item.json.payload.id }}_db_temporary",
          "mode": "name"
        },
        "requestOptions": {}
      },
      "type": "n8n-nodes-qdrant.qdrant",
      "typeVersion": 1,
      "position": [
        160,
        -448
      ],
      "id": "5f6f8e55-72ac-4f3d-a3ca-2b29ba0181de",
      "name": "Scroll Points",
      "credentials": {
        "qdrantRestApi": {
          "id": "TIJUGlBtMaBZT6mZ",
          "name": "Qdrant account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "resource": "point",
        "operation": "deletePoints",
        "collectionName": {
          "__rl": true,
          "value": "={{ $('JWT2').first().json.payload.id }}_db_temporary",
          "mode": "name"
        },
        "points": "={{ $json.ids }}",
        "ordering": "medium",
        "requestOptions": {}
      },
      "type": "n8n-nodes-qdrant.qdrant",
      "typeVersion": 1,
      "position": [
        512,
        -448
      ],
      "id": "b03ec962-c8da-4d36-b0ff-d2beac1fe4f6",
      "name": "Delete Points",
      "credentials": {
        "qdrantRestApi": {
          "id": "TIJUGlBtMaBZT6mZ",
          "name": "Qdrant account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const ids = $json.result.points.map(p => p.id);\nreturn [{ json: { ids } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -448
      ],
      "id": "4997b378-0fbd-4d32-9911-ea85f51d28be",
      "name": "get pointer array",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "deleteCollection",
        "collectionName": {
          "__rl": true,
          "value": "={{ $('JWT2').item.json.payload.id }}_db_temporary",
          "mode": "name"
        },
        "requestOptions": {}
      },
      "type": "n8n-nodes-qdrant.qdrant",
      "typeVersion": 1,
      "position": [
        64,
        0
      ],
      "id": "15d4f963-dcca-496b-ad2a-bea62d1b7214",
      "name": "Delete Collection",
      "credentials": {
        "qdrantRestApi": {
          "id": "TIJUGlBtMaBZT6mZ",
          "name": "Qdrant account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "JWT": {
      "main": [
        [
          {
            "node": "validation exp token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isToken?": {
      "main": [
        [
          {
            "node": "JWT",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response token isEmpty",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validation exp token": {
      "main": [
        [
          {
            "node": "isToken exp?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isToken exp?": {
      "main": [
        [
          {
            "node": "inputSet",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response token exp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tokenInput": {
      "main": [
        [
          {
            "node": "isToken?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook chatbot trigger": {
      "main": [
        [
          {
            "node": "pdfExist?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pdfExist?": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          },
          {
            "node": "fileName parameter",
            "type": "main",
            "index": 0
          },
          {
            "node": "tokenInput1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "tokenInput",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "inputProcessor",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "inputProcessor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "inputProcessor": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "img prompt set",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "chat prompt set",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "chat prompt set1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat prosses input": {
      "main": [
        [
          {
            "node": "decode JWT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "conversationStore": {
      "main": [
        [
          {
            "node": "latestContext",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "conversationStore",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "latestContext": {
      "main": [
        [
          {
            "node": "chat prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat prompt": {
      "main": [
        [
          {
            "node": "build prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "build prompt": {
      "main": [
        [
          {
            "node": "ChatCore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini1": {
      "ai_embedding": [
        [
          {
            "node": "learning-base-qdrant",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "chat core memory": {
      "ai_memory": [
        [
          {
            "node": "ChatCore",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "ChatCore": {
      "main": [
        [
          {
            "node": "response code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "inputSet": {
      "main": [
        [
          {
            "node": "inputProcessor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Merge PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split PDF into Chunks": {
      "main": [
        [
          {
            "node": "pdf chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Token Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store": {
      "main": [
        [
          {
            "node": "chat prompt set2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fileName parameter": {
      "main": [
        [
          {
            "node": "Merge PDF",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge PDF": {
      "main": [
        [
          {
            "node": "Merge wth token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge wth token": {
      "main": [
        [
          {
            "node": "isToken exp?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pdf chunks": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Gemini Credential": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "JWT2": {
      "main": [
        [
          {
            "node": "validation exp token1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isToken?1": {
      "main": [
        [
          {
            "node": "JWT2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response token isEmpty1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validation exp token1": {
      "main": [
        [
          {
            "node": "Merge wth token",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "isToken exp?1": {
      "main": [
        [
          {
            "node": "Check Collection Exists",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response token exp1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tokenInput1": {
      "main": [
        [
          {
            "node": "isToken?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "response code": {
      "main": [
        [
          {
            "node": "Chat Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fields - Set Values": {
      "main": [
        [
          {
            "node": "AI Agent - Create Image From Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Clean Json": {
      "main": [
        [
          {
            "node": "Code - Get Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Get Prompt": {
      "main": [
        [
          {
            "node": "Code - Set Filename",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Create Image": {
      "main": [
        [
          {
            "node": "Img Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Set Filename": {
      "main": [
        [
          {
            "node": "HTTP Request - Create Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Create Image From Prompt": {
      "main": [
        [
          {
            "node": "Code - Clean Json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent - Create Image From Prompt",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "decode JWT": {
      "main": [
        [
          {
            "node": "conversationStore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat prompt set": {
      "main": [
        [
          {
            "node": "chat prosses input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "img prompt set": {
      "main": [
        [
          {
            "node": "Fields - Set Values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "learning-base-qdrant": {
      "ai_tool": [
        [
          {
            "node": "ChatCore1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini ChatCore": {
      "ai_languageModel": [
        [
          {
            "node": "ChatCore",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "chat prosses input1": {
      "main": [
        [
          {
            "node": "decode JWT1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "conversationStore1": {
      "main": [
        [
          {
            "node": "latestContext1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "conversationStore1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "latestContext1": {
      "main": [
        [
          {
            "node": "chat prompt1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat prompt1": {
      "main": [
        [
          {
            "node": "build prompt1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "build prompt1": {
      "main": [
        [
          {
            "node": "ChatCore1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ChatCore1": {
      "main": [
        [
          {
            "node": "response code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat core memory1": {
      "ai_memory": [
        [
          {
            "node": "ChatCore1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "response code1": {
      "main": [
        [
          {
            "node": "Chat Respond1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "decode JWT1": {
      "main": [
        [
          {
            "node": "conversationStore1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat prompt set1": {
      "main": [
        [
          {
            "node": "chat prosses input1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Collection Exists": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Delete Collection",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get pdf text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split PDF into Chunks1": {
      "main": [
        [
          {
            "node": "pdf chunks1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pdf chunks1": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get pdf text": {
      "main": [
        [
          {
            "node": "Split PDF into Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get pdf text1": {
      "main": [
        [
          {
            "node": "Split PDF into Chunks1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "conversationStore2": {
      "main": [
        [
          {
            "node": "latestContext2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "conversationStore2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "latestContext2": {
      "main": [
        [
          {
            "node": "chat prompt2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat prompt2": {
      "main": [
        [
          {
            "node": "build prompt2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "build prompt2": {
      "main": [
        [
          {
            "node": "ChatCore2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ChatCore2": {
      "main": [
        [
          {
            "node": "response code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat core memory2": {
      "ai_memory": [
        [
          {
            "node": "ChatCore2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "response code2": {
      "main": [
        [
          {
            "node": "Chat Respond2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat prompt set2": {
      "main": [
        [
          {
            "node": "conversationStore2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini": {
      "ai_embedding": [
        [
          {
            "node": "sessional qdrant db",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "sessional qdrant db": {
      "ai_tool": [
        [
          {
            "node": "ChatCore2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Token Splitter2": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader2",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader2": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store2",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Gemini Credential2": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "conversationStore3": {
      "main": [
        [
          {
            "node": "latestContext3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory3": {
      "ai_memory": [
        [
          {
            "node": "conversationStore3",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "latestContext3": {
      "main": [
        [
          {
            "node": "chat prompt3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat prompt3": {
      "main": [
        [
          {
            "node": "build prompt3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "build prompt3": {
      "main": [
        [
          {
            "node": "ChatCore3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ChatCore3": {
      "main": [
        [
          {
            "node": "response code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat core memory3": {
      "ai_memory": [
        [
          {
            "node": "ChatCore3",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "response code3": {
      "main": [
        [
          {
            "node": "Chat Respond3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat prompt set3": {
      "main": [
        [
          {
            "node": "conversationStore3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini2": {
      "ai_embedding": [
        [
          {
            "node": "sessional qdrant db3",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "ChatCore3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store2": {
      "main": [
        [
          {
            "node": "chat prompt set3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sessional qdrant db3": {
      "ai_tool": [
        [
          {
            "node": "ChatCore3",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "ChatCore1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "ChatCore2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get Collection": {
      "main": [
        [
          {
            "node": "Scroll Points",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scroll Points": {
      "main": [
        [
          {
            "node": "get pointer array",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Points": {
      "main": [
        []
      ]
    },
    "get pointer array": {
      "main": [
        [
          {
            "node": "Delete Points",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Collection": {
      "main": [
        [
          {
            "node": "get pdf text1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1ffec955-548f-4e64-bccc-bd6c6052be30",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bd6cd94e96dcc625bd73366095f95952b0a4a204b9d0a766da8fb9750cba033c"
  },
  "id": "dip501vBELvom9m8",
  "tags": [
    {
      "createdAt": "2025-07-14T06:33:17.571Z",
      "updatedAt": "2025-07-14T06:33:17.571Z",
      "id": "vUsdXc4dDAWxuf81",
      "name": "Tsel AI Lab"
    }
  ]
}