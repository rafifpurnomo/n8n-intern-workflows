{
  "name": "[CORE] TSEL-AI-LAB",
  "nodes": [
    {
      "parameters": {
        "operation": "decode",
        "token": "={{ $json.token }}",
        "options": {}
      },
      "type": "n8n-nodes-base.jwt",
      "typeVersion": 1,
      "position": [
        40,
        340
      ],
      "id": "847deb04-994c-4049-8f63-8fb624243125",
      "name": "JWT",
      "credentials": {
        "jwtAuth": {
          "id": "DIKYTiCd0YBNntFq",
          "name": "JWT Auth account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6008934a-29d4-4fa0-8da9-1d17a49351cb",
              "leftValue": "={{ $json.token }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -180,
        340
      ],
      "id": "e614c671-5893-4576-9c08-0ced5fdf2634",
      "name": "isToken?"
    },
    {
      "parameters": {
        "jsCode": "const now = Math.floor(Date.now() / 1000);\nconst exp = $json.payload.exp;\nreturn [\n  {\n    json: {\n      isExpired: now > exp,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        340
      ],
      "id": "dce96d42-f93b-449b-9c94-5096736ee587",
      "name": "validation exp token"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0a86cff5-bf94-432f-839c-ae3e232b4c28",
              "leftValue": "={{ $json.isExpired }}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        460,
        340
      ],
      "id": "eb80f95b-07d9-4b3e-87ab-baf45500a7e4",
      "name": "isToken exp?"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"Sesi anda telah berakhir, harap lakukan login terlebih dahulu\"\n}",
        "options": {
          "responseCode": 404
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        680,
        600
      ],
      "id": "0654b058-3cdb-47b3-89ea-d6da9ec40a27",
      "name": "Response token exp"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"harap lakukan login terlebih dahulu\"\n}",
        "options": {
          "responseCode": 400
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -180,
        600
      ],
      "id": "79fe47a0-a40f-4294-bfe3-d454e39d610a",
      "name": "Response token isEmpty"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "token",
              "value": "={{ $json.headers[\"authorization\"] ? $json.headers[\"authorization\"].replace(\"Bearer \", \"\").trim() : '' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "162e2b4e-e042-40e7-b2c5-d0c7c981f0f3",
      "name": "tokenInput",
      "type": "n8n-nodes-base.set",
      "position": [
        -200,
        100
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "core",
        "responseMode": "responseNode",
        "options": {
          "binaryPropertyName": "file"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -640,
        -80
      ],
      "id": "dbfb101a-0f3b-4744-ad55-c6cafc043bf3",
      "name": "Webhook chatbot trigger",
      "webhookId": "e5a15a44-a6e5-4f76-b096-73ec34a96d90"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "39e39b59-708c-47b8-9627-a07c0902f1c4",
                    "leftValue": "={{ $json.output.intention }}",
                    "rightValue": "generate",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "generate"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.intention }}",
                    "rightValue": "other",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "816a4f2e-8799-48a6-b4b6-0295563e2220"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "other"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d58f8576-6861-4c59-9af7-76d4d1464b2e",
                    "leftValue": "={{ $json.output.intention }}",
                    "rightValue": "chat",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "chat"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1540,
        320
      ],
      "id": "b2509c6e-d2ef-4b2f-ae40-a373136350a1",
      "name": "Switch"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c965e87e-0598-4278-a7fc-95a6dd005531",
              "leftValue": "={{ $binary.file0 }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -80,
        -620
      ],
      "id": "7b914960-4ecc-4c2d-8f24-87e81037e740",
      "name": "pdfExist?"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "Tugas kamu adalah mengklasifikasikan satu kalimat pesan dari pengguna menjadi dua label: - \"intention\": \"generate\", \"chat\", atau \"other\" - \"typeData\": \"image\" jika generate, selain itu \"text\"  Contoh: - \"buatkan grafik penjualan\" → {\"intention\": \"generate\", \"typeData\": \"image\"} - \"apa itu BUMN?\" → {\"intention\": \"chat\", \"typeData\": \"text\"} - \"halo\" → {\"intention\": \"other\", \"typeData\": \"text\"}  Jawab hanya dalam format JSON valid satu baris tanpa komentar tambahan seperti: {\"intention\": \"generate\", \"typeData\": \"image\"}"
            }
          ]
        }
      },
      "id": "010c7b01-2792-4074-9bdb-9020214705db",
      "name": "inputProcessor",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        1200,
        320
      ],
      "typeVersion": 1.6,
      "alwaysOutputData": false,
      "executeOnce": true
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"intention\": \"chat\",\n  \"typeData\": \"text\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1360,
        620
      ],
      "id": "8496a63f-82d1-4ab2-bd80-07cf08644ffb",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash-002",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1200,
        600
      ],
      "id": "c96b9ab0-9df8-4a8a-a22b-32b97886ff14",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "hu7ixQhsS09un4nf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      chatInput: $input.first().json.chatInput,\n      token: $input.first().json.token\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1920,
        340
      ],
      "id": "b95c09a8-0c12-4a53-88ff-6bd1b7bea110",
      "name": "chat prosses input"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "sessionId",
              "value": "={{ $('decode JWT').item.json.payload.id }}"
            },
            {
              "name": "chatInput",
              "value": "={{ $('chatInput').item.json.chatInput }}"
            }
          ]
        },
        "options": {}
      },
      "id": "b96c65f8-9d63-4ab5-9703-26fbead9252b",
      "name": "sessionData",
      "type": "n8n-nodes-base.set",
      "position": [
        2560,
        340
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "options": {
          "groupMessages": true
        }
      },
      "id": "6eeea6f0-e249-4454-b709-79f9b084dd00",
      "name": "conversationStore",
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "position": [
        2720,
        340
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        2720,
        540
      ],
      "id": "149e33a8-1ecb-40d5-b5ef-a66eaf29b391",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "jsCode": "const allItems = $input.all();\nconst lastItem = allItems[allItems.length - 1];\n\nif (lastItem && Array.isArray(lastItem.json.messages)) {\n  const messages = lastItem.json.messages;\n  const count = messages.length;\n\n  if (count === 0) return [{ json: { message: \"\" } }];\n\n  const extractFirstLine = (text) => {\n    if (!text) return \"\";\n    return text.split('\\n')[0].replace(/^Input from user:\\s*/, '');\n  };\n\n  const trimEndNewline = (text) => {\n    if (!text) return \"\";\n    return text.replace(/\\n+$/, '');\n  };\n\n  const selectedMessages = (count === 1) ? [messages[0]] : messages.slice(-1);\n\n  const combinedMessage = selectedMessages.map((msg, idx) => {\n    return `Message ${idx + 1}:\\nhuman: ${extractFirstLine(msg.human)}\\nai: ${trimEndNewline(msg.ai)}`;\n  }).join('\\n\\n');\n\n  return [{ json: { messages: combinedMessage } }];\n}\n\nreturn [{ json: { messages: \"\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3000,
        340
      ],
      "id": "29736c8d-d18e-4092-810c-1a167962229f",
      "name": "latestContext"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df66f11f-998d-4352-84f8-411cac3fc70e",
              "name": "prompt",
              "value": "=1. **Aturan**\n\n* Berkomunikasilah secara formal, jelas, dan sopan setiap saat.\n* Bersikap ringkas dan tepat, hindari detail yang tidak perlu.\n* Pertahankan nada yang positif dan profesional sebagai asisten yang andal dan berpengetahuan.\n* Hormati batasan pengguna dan hindari topik yang dilarang atau tidak pantas.\n* Buat percakapan tetap menarik dengan mendorong partisipasi pengguna, namun saat meminta klarifikasi atau informasi tambahan, ajukan hanya satu pertanyaan terfokus agar tidak membingungkan pengguna. Hindari mengakhiri dialog secara tiba-tiba.\n* Ikuti instruksi pengguna dengan tepat.\n* Jangan menyertakan teks atau penjelasan tambahan kecuali diminta secara eksplisit.\n* Gunakan bahasa indonesia sebagai bahasa utama\n\n2. **Instruksi Tanggapan**\n\n* Analisis pesan dan riwayat percakapan untuk menjaga konteks dan kesinambungan.\n* Jika pengulangan diminta, kembalikan pesan persis seperti yang diberikan. Jika tidak, berikan tanggapan yang jelas dan sesuai berdasarkan maksud dan konteks.\n* Jika pesan tidak jelas, berikan satu interpretasi yang masuk akal dan minta klarifikasi sambil menjaga percakapan tetap aktif.\n* Gunakan bahasa indonesia sebagai bahasa utama\n\n3. **Penggunaan Tools**\n\n* Dilarang memberikan jawaban berbasis pengetahuan umum jika tools tersedia. WAJIB gunakan tools RAG terlebih dahulu.\n* Jika hasil dari tools tidak ditemukan (tidak relevan, kosong, atau confidence rendah), jawab dengan: \"Maaf saya tidak bisa menemukan jawaban dari dokumen.\"",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3180,
        340
      ],
      "id": "53112923-8027-4721-95ae-ba0652d9428b",
      "name": "chat prompt"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df66f11f-998d-4352-84f8-411cac3fc70e",
              "name": "prompt",
              "value": "={{ $json.prompt }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3360,
        340
      ],
      "id": "b6d1baba-8a8a-48fa-bae3-bcf6021761c7",
      "name": "build prompt"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Input dari pengguna: {{ $('chatInput').item.json.chatInput }}\n\n{{ $json.prompt }}",
        "options": {
          "systemMessage": "=Anda chatbot profesional untuk perusahaan yang dirancang untuk membantu pengguna dengan komunikasi yang jelas, sopan, dan akurat. Anda memberikan respons teks yang informatif dan menghasilkan gambar hanya jika diminta secara eksplisit oleh pengguna. Gunakan riwayat percakapan yang tersedia untuk menjaga konteks dan kesinambungan. Patuhi aturan perusahaan secara ketat untuk memastikan interaksi yang tepat dan aman.Anda dapat mengobrol dengan saya untuk mendapatkan jawaban dan membuat gambar khusus berdasarkan instruksi Anda.Prioritaskan pesan relevan yang paling baru jika terdapat beberapa referensi sebelumnya. Balas dalam Bahasa Indonesia untuk semua permintaan teks. Jaga agar respons tetap sependek mungkin tanpa mengurangi kejelasan atau kelancaran interaksi. Jangan memaksakan interaksi lebih dari yang diperlukan untuk memberikan jawaban yang jelas."
        }
      },
      "id": "39c7bacc-7223-4a0e-9046-5677d33d674c",
      "name": "ChatCore",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        3580,
        340
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        3460,
        580
      ],
      "id": "8aa581a5-b055-4936-aa10-545ca6599cf6",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "TUbtLRFNULuqqBte",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "chatInput",
              "value": "={{ $('chat prompt set').item.json.chatInput }}"
            }
          ]
        },
        "options": {}
      },
      "id": "1931ec34-ff71-42fa-bc18-18379af10a45",
      "name": "chatInput",
      "type": "n8n-nodes-base.set",
      "position": [
        2280,
        340
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        3780,
        700
      ],
      "id": "30944ac7-35d4-437a-821e-5cf8214ea9e4",
      "name": "Embeddings Google Gemini1",
      "credentials": {
        "googlePalmApi": {
          "id": "hu7ixQhsS09un4nf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [$input.last()];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2420,
        340
      ],
      "id": "8cd305cc-61be-4981-938d-a62c245757b9",
      "name": "lastPrompt"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "gunakan tools ini untuk mencari data terkait yang di tanyakan oleh user",
        "qdrantCollection": {
          "__rl": true,
          "value": "file_pdf",
          "mode": "list",
          "cachedResultName": "file_pdf"
        },
        "topK": 5,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.3,
      "position": [
        3780,
        540
      ],
      "id": "ba2092f8-0bde-4c06-afc2-66c49c8fe939",
      "name": "Qdrant Vector Store2",
      "credentials": {
        "qdrantApi": {
          "id": "WvMXTDUfDLp2KASV",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('sessionData').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        3580,
        700
      ],
      "id": "569aa35d-1659-41d4-8d96-4fd34be6ff8a",
      "name": "chat core memory"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "chatInput",
              "value": "={{ $('Webhook chatbot trigger').item.json.body.chatInput }}"
            },
            {
              "name": "token",
              "value": "={{ $('tokenInput').item.json.token }}"
            }
          ]
        },
        "options": {}
      },
      "id": "23de08d5-c96a-4abc-88df-8f19dbf3e49e",
      "name": "inputSet",
      "type": "n8n-nodes-base.set",
      "position": [
        780,
        320
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "file0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        980,
        -1960
      ],
      "id": "0a5449e3-cc65-4a1c-a216-c828784b7edd",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst fullText = items.map(item => item.json.text || \"\").join(\" \");\n\n// Cari item yang punya properti fileName\nconst fileNameItem = items.find(item => item.json.fileName);\nconst fileName = fileNameItem?.json.fileName || \"unknown.pdf\";\n\nconst chunkSize = 500;\nconst overlap = 100;\nconst chunks = [];\n\nfor (let i = 0; i < fullText.length; i += chunkSize - overlap) {\n  const chunk = fullText.slice(i, i + chunkSize);\n  chunks.push({\n    json: {\n      text: chunk,\n      metadata: {\n        source: \"shared_pdf\",\n        filename: fileName,\n        uploadedAt: new Date().toISOString()\n      }\n    }\n  });\n}\n\nreturn chunks;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1840,
        -1620
      ],
      "id": "4ea937b5-16f0-4023-a704-559db1015588",
      "name": "Split PDF into Chunks"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
      "typeVersion": 1,
      "position": [
        2400,
        -1240
      ],
      "id": "da6a4d44-afb8-48a0-a504-11f5447d2a97",
      "name": "Token Splitter"
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.text }}",
        "options": {}
      },
      "id": "07cce982-ee9a-4c00-ae79-53f92013cef7",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        2400,
        -1440
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "value": "file_pdf",
          "mode": "list",
          "cachedResultName": "file_pdf"
        },
        "options": {
          "collectionConfig": ""
        }
      },
      "id": "074a2e4f-8678-4663-b188-a3b86b6b7a08",
      "name": "Qdrant Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "position": [
        2280,
        -1620
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "credentials": {
        "qdrantApi": {
          "id": "WvMXTDUfDLp2KASV",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f29be43a-50cf-42e3-b518-ea7380a3553b",
              "name": "fileName",
              "value": "={{ $binary.file0.fileName }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        980,
        -1700
      ],
      "id": "2bc1c83f-5070-4229-810d-f0a80846159d",
      "name": "fileName parameter"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1220,
        -1840
      ],
      "id": "fb959ecc-b473-48e4-b4aa-0a392091a6a7",
      "name": "Merge PDF"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1420,
        -1600
      ],
      "id": "c3424182-28e3-4106-8636-7868dde51c8b",
      "name": "Merge wth token"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "text",
              "value": "={{ $json.text }}"
            },
            {
              "name": "source",
              "value": "={{ $json.metadata.source }}"
            },
            {
              "name": "fileName",
              "value": "={{ $json.metadata.filename }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d07fcee3-acd9-4221-a0c1-75859e22c8d4",
      "name": "pdf chunks",
      "type": "n8n-nodes-base.set",
      "position": [
        2040,
        -1620
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        2260,
        -1460
      ],
      "id": "57f43caa-334b-4895-8739-e90c18c5968e",
      "name": "Embeddings Gemini Credential",
      "credentials": {
        "googlePalmApi": {
          "id": "hu7ixQhsS09un4nf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "decode",
        "token": "={{ $json.token }}",
        "options": {}
      },
      "type": "n8n-nodes-base.jwt",
      "typeVersion": 1,
      "position": [
        880,
        -1400
      ],
      "id": "5ee0e61c-3a13-4c93-8a40-f0a91ec20200",
      "name": "JWT2",
      "credentials": {
        "jwtAuth": {
          "id": "DIKYTiCd0YBNntFq",
          "name": "JWT Auth account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6008934a-29d4-4fa0-8da9-1d17a49351cb",
              "leftValue": "={{ $json.token }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        700,
        -1400
      ],
      "id": "e8734e86-c594-475c-812a-d27019fe6c13",
      "name": "isToken?1"
    },
    {
      "parameters": {
        "jsCode": "const now = Math.floor(Date.now() / 1000);\nconst exp = $json.payload.exp;\nreturn [\n  {\n    json: {\n      isExpired: now > exp,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        -1400
      ],
      "id": "333657ac-aef1-405c-9733-14c504d620ef",
      "name": "validation exp token1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0a86cff5-bf94-432f-839c-ae3e232b4c28",
              "leftValue": "={{ $json.isExpired }}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1620,
        -1600
      ],
      "id": "0924bf3c-dc76-4afd-aa38-9126ce2648d2",
      "name": "isToken exp?1"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"Sesi anda telah berakhir, harap lakukan login terlebih dahulu\"\n}",
        "options": {
          "responseCode": 404
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1620,
        -1340
      ],
      "id": "1f509c24-e0be-442a-937e-da343bc32c29",
      "name": "Response token exp1"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"harap lakukan login terlebih dahulu\"\n}",
        "options": {
          "responseCode": 400
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        680,
        -1120
      ],
      "id": "e320763b-702d-4319-b912-0ab68c4f8215",
      "name": "Response token isEmpty1"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "token",
              "value": "={{ $json.headers[\"authorization\"] ? $json.headers[\"authorization\"].replace(\"Bearer \", \"\").trim() : '' }}"
            },
            {
              "value": "={{ $binary.file0 }}"
            }
          ]
        },
        "options": {}
      },
      "id": "4d5cac20-94e1-4efb-86df-e1b271ed73c9",
      "name": "tokenInput1",
      "type": "n8n-nodes-base.set",
      "position": [
        680,
        -1640
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "return{\n  \"status\": \"no pdf\"\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        -320
      ],
      "id": "a7a081d9-1f3a-4097-b9d8-b782076e61a6",
      "name": "return if pdf not exist"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      success: true,\n      status: 200,\n      chatInput: $json.chatInput,\n      response: JSON.stringify($json.output)\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3940,
        340
      ],
      "id": "3e1d106f-e4ce-4343-806b-68f20dd86635",
      "name": "response code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4e04fec4-441e-45f7-acea-0017a4b5c104",
              "name": "model",
              "type": "string",
              "value": "flux"
            },
            {
              "id": "aa80cd68-1c82-4032-b1d7-e098856eec38",
              "name": "width",
              "type": "string",
              "value": "1080"
            },
            {
              "id": "da6d305f-aece-49bd-ae02-52df59915c60",
              "name": "height",
              "type": "string",
              "value": "1920"
            }
          ]
        },
        "options": {}
      },
      "id": "584705a1-0088-46fe-b852-220864ba3cd1",
      "name": "Fields - Set Values",
      "type": "n8n-nodes-base.set",
      "position": [
        2220,
        -420
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "jsCode": "function cleanAndExtractJSON(response) {\n    try {\n        const result = {\n            image_prompt: []\n        };\n\n        const lines = response.split('\\n');\n        let currentPrompt = '';\n\n        for (const line of lines) {\n            if (line.includes('\"prompt\":')) {\n                if (currentPrompt) {\n                    result.image_prompt.push(currentPrompt.trim());\n                }\n                currentPrompt = line.split('\"prompt\":')[1].trim();\n            }\n        }\n\n        if (currentPrompt) {\n            result.image_prompt.push(currentPrompt.trim());\n        }\n\n        return { json: result };\n        \n    } catch (error) {\n        return { \n            json: {\n                image_prompt: []\n            }\n        };\n    }\n}\n\nconst response = $input.first().json.output;\nreturn cleanAndExtractJSON(response);"
      },
      "id": "ecd74e23-bd47-45f0-896b-0adaabc6068f",
      "name": "Code - Clean Json",
      "type": "n8n-nodes-base.code",
      "position": [
        2840,
        -420
      ],
      "executeOnce": false,
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "return $input.first().json.image_prompt.map(prompt => ({\n  json: {\n    body: {\n      prompt: prompt,\n  \"image_size\": {\n    \"width\": $('Fields - Set Values').first().json.width,\n    \"height\": $('Fields - Set Values').first().json.height\n  },\n  \"num_inference_steps\": 12,\n  \"guidance_scale\": 3.5,\n  \"num_images\": 1,\n  \"enable_safety_checker\": true,\n}\n    }\n  }\n));"
      },
      "id": "db66b66e-ff5c-4690-9cad-929868ab8070",
      "name": "Code - Get Prompt",
      "type": "n8n-nodes-base.code",
      "position": [
        3020,
        -420
      ],
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "=https://image.pollinations.ai/prompt/ {{ $('Code - Get Prompt').item.json.body.prompt }}",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "={\n  \"width\": {{ $('Fields - Set Values').item.json.width }},\n  \"height\": {{ $('Fields - Set Values').item.json.height }},\n  \"model\": \"{{ $('Fields - Set Values').item.json.model }}\",\n  \"seed\": 42,\n  \"nologo\": true\n}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "2c3eefce-fb68-4324-abc5-a791a5b3a1f2",
      "name": "HTTP Request - Create Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3520,
        -420
      ],
      "retryOnFail": true,
      "typeVersion": 4.2,
      "alwaysOutputData": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "jsCode": "for (let i = 0; i < items.length; i++) {\n  items[i].json.fileName = `images_${(i + 1).toString().padStart(3, '0')}.png`;\n}\nreturn items;"
      },
      "id": "d84b2562-f0a5-45a3-af56-3ffa4c9ce627",
      "name": "Code - Set Filename",
      "type": "n8n-nodes-base.code",
      "position": [
        3180,
        -420
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('img prompt set').item.json.chatInput }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an AI image‑prompt creation expert. Please create a post using the following JSON format:\nAI Image Generation Prompt Guidelines:\nObjective\nCreate highly realistic, high‐quality images\nEnsure the image content faithfully conveys the spirit of the original text\nIntegrate short text (10–20 characters) naturally into the image\nMaintain consistency and professionalism\n\nStandard Prompt Structure\n[Main Scene] | [Key Elements] | [Text Integration] | [Lighting & Atmosphere] | [Technical Parameters] | [Style Parameters]\n\nComponent Breakdown\n1. Main Scene (Weight ::8)\nDescribe the primary setting in line with the content.\nExamples:\nTech news: “modern tech office setting, minimalist workspace”\nEconomy news: “professional financial district, corporate environment”\nEducation news: “modern classroom, advanced learning environment”\n\n2. Key Elements (Weight ::8)\nList the main visual elements required.\nExamples:\n“large HD display showing text ‘AI Ethics’ in modern typography”\n“professional people in business attire discussing around interactive screen”\n“detailed infographic elements floating in augmented reality style”\n\n3. Text Integration (Weight ::7)\nHow to display text within the image:\ntext elements | elegant typography, clear readable text, integrated naturally into scene ::7\n\n4. Lighting & Atmosphere (Weight ::7)\nlighting | cinematic dramatic lighting, natural ambient light, professional studio setup ::7\nbackground | depth of field blur, clean professional environment ::6\n\n5. Technical Parameters\nparameters | 8k resolution, hyperrealistic, photorealistic quality, octane render, cinematic composition --ar 16:9\nsettings | sharp focus, high detail, professional photography --s 1000 --q 2\nComplete Examples\nExample 1: AI Ethics News\nprofessional tech conference room | large display showing \"AI Ethics Now\" in modern typography, group of diverse executives in discussion ::8 | clean modern workspace, glass walls, tech atmosphere ::7 | cinematic lighting, natural window light ::7 | 8k resolution, hyperrealistic quality, octane render --ar 16:9 --s 1000 --q 2\nExample 2: Financial Market News\nmodern stock exchange environment | giant LED wall showing \"Market Alert\" in bold typography, professional traders in action ::8 | dynamic financial data visualization, sleek modern interior ::7 | dramatic lighting, blue-tinted atmosphere ::7 | 8k resolution, photorealistic quality --ar 16:9 --s 1000 --q 2\n\nAdditional Parameters\n--chaos [0–100]: Adjust randomness\n--stylize [0–1000]: Degree of stylization\n--seed [number]: Ensure consistency across generations\n--niji: Optimized for Asian‐style aesthetics\n--v 5.2: Use the latest model version\n\nImportant Notes\nText in Image\nKeep it short and legible\nUse professional fonts\nIntegrate naturally into the scene\n\nComposition\nFollow the rule of thirds\nEnsure a clear focal point\nBalance text and imagery\n\nColor\nMatch a professional tone\nProvide sufficient contrast for readability\nMaintain visual consistency\n\nTechnical Details\nAlways use high resolution (8k)\nEnsure professional lighting\nOptimize for sharpness and detail\n\nCommon Pitfalls to Avoid\nOverly generic prompts\nMissing text‐integration guidance\nFailing to specify composition rules\nOmitting key technical parameters\n\nThe structure is:\n{\n  prompt_image {prompt : \"\" , ...}\n}"
        }
      },
      "id": "19d704fd-f5eb-425d-8ac9-d4f2398ed2aa",
      "name": "AI Agent - Create Image From Prompt",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        2400,
        -420
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "content": "# 🤖 AI Core\n\nPerintah dan pengaturan yang sebelumnya kita buat akan dikirim ke Model Pembuatan Gambar. model bisa berbagai macam tergantung kebutuhan pengguna",
        "height": 740,
        "width": 460,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2200,
        -720
      ],
      "id": "2a1c0945-d1e6-4703-b614-f8ec0589e8d1",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# 🧹 Cleaning Prompt\n\nSetelah prompt berhasil dihasilkan oleh AI, workflow melanjutkan ke tahap pembersihan dan penyusunan ulang data. \n\n1. Node Code - Clean: Json digunakan untuk mengekstrak bagian prompt yang relevan dari respon AI dalam format JSON yang bersih dan terstruktur.\n2. Node Code - Get Prompt: membentuk struktur body permintaan yang akan dikirim ke API image generator.\n3. node Code - Set Filename: secara otomatis menetapkan nama file untuk gambar yang dihasilkan dengan format berurutan.",
        "height": 740,
        "width": 520,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2800,
        -720
      ],
      "id": "47f4defb-dec0-4ff3-8eff-1c5b985bad2f",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "# 🏁 Final Step\n\nSetelah prompt dibersihkan sistem akan memanggil API pembuatan gambar\n\nSetelah gambar sudah selesai di proses, sistem akan memberikan nama file & respon menggunakan format yang berurutan. Gambar kemudian dikirim kembali ke pengguna melalui node Respond to Webhook sebagai respons akhir dari proses generate gambar.",
        "height": 740,
        "width": 520,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3420,
        -720
      ],
      "id": "2d0a5a64-9698-4b92-b53a-23f14b39aa76",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {
          "maxOutputTokens": 65536,
          "temperature": 0.5,
          "topK": 40,
          "topP": 1,
          "safetySettings": {
            "values": [
              {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_NONE"
              },
              {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_NONE"
              },
              {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_NONE"
              },
              {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_NONE"
              }
            ]
          }
        }
      },
      "id": "696ef6a1-b75f-45bd-a107-8d94e11d6b30",
      "name": "Google Gemini Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        2400,
        -220
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "hu7ixQhsS09un4nf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "decode",
        "token": "={{ $json.token }}",
        "options": {}
      },
      "type": "n8n-nodes-base.jwt",
      "typeVersion": 1,
      "position": [
        2100,
        340
      ],
      "id": "675eefc0-ba69-491f-beeb-d2f19b52dcea",
      "name": "decode JWT",
      "credentials": {
        "jwtAuth": {
          "id": "DIKYTiCd0YBNntFq",
          "name": "JWT Auth account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"succes\": {{ $json.success }},\n  \"status\": {{ $json.status }},\n  \"chatInput\": \"{{ $('Webhook chatbot trigger').item.json.body.chatInput }}\",\n  \"response\": {{ $json.response }}\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        4300,
        340
      ],
      "id": "fdd0193d-1bf7-4926-a900-02f08cecf895",
      "name": "Chat Respond"
    },
    {
      "parameters": {
        "respondWith": "binary",
        "responseDataSource": "set",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        3740,
        -420
      ],
      "id": "00f49108-8622-4dc2-ba12-7eaf0e5ce6ee",
      "name": "Img Respond"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "chatInput",
              "value": "={{ $('Webhook chatbot trigger').item.json.body.chatInput }}"
            },
            {
              "name": "token",
              "value": "={{ $('tokenInput').item.json.token }}"
            }
          ]
        },
        "options": {}
      },
      "id": "000e9eb9-c83a-4e4c-9d10-0c812a7fa933",
      "name": "chat prompt set",
      "type": "n8n-nodes-base.set",
      "position": [
        1740,
        320
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "chatInput",
              "value": "={{ $('Webhook chatbot trigger').item.json.body.chatInput }}"
            }
          ]
        },
        "options": {}
      },
      "id": "55b26f13-901f-4db6-ae6c-e736f074bce8",
      "name": "img prompt set",
      "type": "n8n-nodes-base.set",
      "position": [
        1860,
        -400
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "createCollection",
        "requestOptions": {}
      },
      "type": "n8n-nodes-qdrant.qdrant",
      "typeVersion": 1,
      "position": [
        1920,
        -1120
      ],
      "id": "4f1f63f9-0ad6-4692-9308-0ee9d29a9c4b",
      "name": "Create Collection"
    }
  ],
  "pinData": {},
  "connections": {
    "JWT": {
      "main": [
        [
          {
            "node": "validation exp token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isToken?": {
      "main": [
        [
          {
            "node": "JWT",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response token isEmpty",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validation exp token": {
      "main": [
        [
          {
            "node": "isToken exp?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isToken exp?": {
      "main": [
        [
          {
            "node": "inputSet",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response token exp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tokenInput": {
      "main": [
        [
          {
            "node": "isToken?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook chatbot trigger": {
      "main": [
        [
          {
            "node": "tokenInput",
            "type": "main",
            "index": 0
          },
          {
            "node": "pdfExist?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pdfExist?": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          },
          {
            "node": "fileName parameter",
            "type": "main",
            "index": 0
          },
          {
            "node": "tokenInput1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "return if pdf not exist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "inputProcessor",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "inputProcessor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "inputProcessor": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "img prompt set",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "chat prompt set",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "chat prompt set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat prosses input": {
      "main": [
        [
          {
            "node": "decode JWT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sessionData": {
      "main": [
        [
          {
            "node": "conversationStore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "conversationStore": {
      "main": [
        [
          {
            "node": "latestContext",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "conversationStore",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "latestContext": {
      "main": [
        [
          {
            "node": "chat prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat prompt": {
      "main": [
        [
          {
            "node": "build prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "build prompt": {
      "main": [
        [
          {
            "node": "ChatCore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "ChatCore",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "chatInput": {
      "main": [
        [
          {
            "node": "lastPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini1": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "lastPrompt": {
      "main": [
        [
          {
            "node": "sessionData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store2": {
      "ai_tool": [
        [
          {
            "node": "ChatCore",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "chat core memory": {
      "ai_memory": [
        [
          {
            "node": "ChatCore",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "ChatCore": {
      "main": [
        [
          {
            "node": "response code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "inputSet": {
      "main": [
        [
          {
            "node": "inputProcessor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Merge PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split PDF into Chunks": {
      "main": [
        [
          {
            "node": "pdf chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Token Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store": {
      "main": [
        []
      ]
    },
    "fileName parameter": {
      "main": [
        [
          {
            "node": "Merge PDF",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge PDF": {
      "main": [
        [
          {
            "node": "Merge wth token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge wth token": {
      "main": [
        [
          {
            "node": "isToken exp?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pdf chunks": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Gemini Credential": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "JWT2": {
      "main": [
        [
          {
            "node": "validation exp token1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isToken?1": {
      "main": [
        [
          {
            "node": "JWT2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response token isEmpty1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validation exp token1": {
      "main": [
        [
          {
            "node": "Merge wth token",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "isToken exp?1": {
      "main": [
        [
          {
            "node": "Split PDF into Chunks",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response token exp1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tokenInput1": {
      "main": [
        [
          {
            "node": "isToken?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "response code": {
      "main": [
        [
          {
            "node": "Chat Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fields - Set Values": {
      "main": [
        [
          {
            "node": "AI Agent - Create Image From Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Clean Json": {
      "main": [
        [
          {
            "node": "Code - Get Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Get Prompt": {
      "main": [
        [
          {
            "node": "Code - Set Filename",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Create Image": {
      "main": [
        [
          {
            "node": "Img Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Set Filename": {
      "main": [
        [
          {
            "node": "HTTP Request - Create Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Create Image From Prompt": {
      "main": [
        [
          {
            "node": "Code - Clean Json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent - Create Image From Prompt",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "decode JWT": {
      "main": [
        [
          {
            "node": "chatInput",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat prompt set": {
      "main": [
        [
          {
            "node": "chat prosses input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "img prompt set": {
      "main": [
        [
          {
            "node": "Fields - Set Values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9d153ccf-b3f8-4c81-b559-839f5661236d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bd6cd94e96dcc625bd73366095f95952b0a4a204b9d0a766da8fb9750cba033c"
  },
  "id": "OimflF2EIOd0MWqt",
  "tags": [
    {
      "createdAt": "2025-07-14T06:33:17.571Z",
      "updatedAt": "2025-07-14T06:33:17.571Z",
      "id": "vUsdXc4dDAWxuf81",
      "name": "Tsel AI Lab"
    }
  ]
}