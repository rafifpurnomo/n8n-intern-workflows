{
  "name": "TSEL-Chabot",
  "nodes": [
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "sessionId",
              "value": "={{ $('JWT').item.json.payload.id }}"
            },
            {
              "name": "chatInput",
              "value": "={{ $('chatInput').item.json.chatInput }}"
            }
          ]
        },
        "options": {}
      },
      "id": "48781bc1-b2e4-4959-a594-05c4890e1db6",
      "name": "sessionData",
      "type": "n8n-nodes-base.set",
      "position": [
        -40,
        1260
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "options": {
          "groupMessages": true
        }
      },
      "id": "ccf7db87-7089-4d98-8217-6481df063c99",
      "name": "conversationStore",
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "position": [
        120,
        1260
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        120,
        1460
      ],
      "id": "1a3a20c3-c744-4926-83f7-71af79e0cb37",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "jsCode": "const allItems = $input.all();\nconst lastItem = allItems[allItems.length - 1];\n\nif (lastItem && Array.isArray(lastItem.json.messages)) {\n  const messages = lastItem.json.messages;\n  const count = messages.length;\n\n  if (count === 0) return [{ json: { message: \"\" } }];\n\n  const extractFirstLine = (text) => {\n    if (!text) return \"\";\n    return text.split('\\n')[0].replace(/^Input from user:\\s*/, '');\n  };\n\n  const trimEndNewline = (text) => {\n    if (!text) return \"\";\n    return text.replace(/\\n+$/, '');\n  };\n\n  const selectedMessages = (count === 1) ? [messages[0]] : messages.slice(-1);\n\n  const combinedMessage = selectedMessages.map((msg, idx) => {\n    return `Message ${idx + 1}:\\nhuman: ${extractFirstLine(msg.human)}\\nai: ${trimEndNewline(msg.ai)}`;\n  }).join('\\n\\n');\n\n  return [{ json: { messages: combinedMessage } }];\n}\n\nreturn [{ json: { messages: \"\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        1260
      ],
      "id": "9451b443-92e9-4094-9451-9d9c2a80978a",
      "name": "latestContext"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Tugas kamu adalah mengklasifikasikan satu kalimat pesan dari pengguna menjadi dua label:\n- \"intention\": \"generate\", \"chat\", atau \"other\"\n- \"typeData\": \"image\" jika generate, selain itu \"text\"\n\nContoh:\n- \"buatkan grafik penjualan\" → {\"intention\": \"generate\", \"typeData\": \"image\"}\n- \"apa itu BUMN?\" → {\"intention\": \"chat\", \"typeData\": \"text\"}\n- \"halo\" → {\"intention\": \"other\", \"typeData\": \"text\"}\n\nJawab hanya dalam format JSON valid satu baris tanpa komentar tambahan seperti:\n{\"intention\": \"generate\", \"typeData\": \"image\"}\n",
        "hasOutputParser": true
      },
      "id": "81d670a1-e4e2-47a9-bb6d-a3d87544bc71",
      "name": "inputProcessor",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        900,
        40
      ],
      "typeVersion": 1.6,
      "alwaysOutputData": false,
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.intention }}",
                    "rightValue": "chat",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "5d646d3a-eb1e-4b30-a286-bdb970237a93"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "chat"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f04e3d4a-c5d9-438f-854d-064164617867",
                    "leftValue": "={{ $json.output.intention }}",
                    "rightValue": "ganerate",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ganerate"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f755e53c-024d-4238-a94c-1d738048a16e",
                    "leftValue": "={{ $json.output.intention }}",
                    "rightValue": "other",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "other"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        0,
        0
      ],
      "id": "b85a7b6b-434a-4e8c-9d8b-bd21f6ed8dfb",
      "name": "Switch",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df66f11f-998d-4352-84f8-411cac3fc70e",
              "name": "prompt",
              "value": "=1. **Aturan**\n\n* Berkomunikasilah secara formal, jelas, dan sopan setiap saat.\n* Bersikap ringkas dan tepat, hindari detail yang tidak perlu.\n* Pertahankan nada yang positif dan profesional sebagai asisten yang andal dan berpengetahuan.\n* Hormati batasan pengguna dan hindari topik yang dilarang atau tidak pantas.\n* Buat percakapan tetap menarik dengan mendorong partisipasi pengguna, namun saat meminta klarifikasi atau informasi tambahan, ajukan hanya satu pertanyaan terfokus agar tidak membingungkan pengguna. Hindari mengakhiri dialog secara tiba-tiba.\n* Ikuti instruksi pengguna dengan tepat.\n* Jangan menyertakan teks atau penjelasan tambahan kecuali diminta secara eksplisit.\n* Gunakan bahasa indonesia sebagai bahasa utama\n\n2. **Instruksi Tanggapan**\n\n* Analisis pesan dan riwayat percakapan untuk menjaga konteks dan kesinambungan.\n* Jika pengulangan diminta, kembalikan pesan persis seperti yang diberikan. Jika tidak, berikan tanggapan yang jelas dan sesuai berdasarkan maksud dan konteks.\n* Jika pesan tidak jelas, berikan satu interpretasi yang masuk akal dan minta klarifikasi sambil menjaga percakapan tetap aktif.\n* Gunakan bahasa indonesia sebagai bahasa utama\n\n3. **Penggunaan Tools**\n\n* Dilarang memberikan jawaban berbasis pengetahuan umum jika tools tersedia. WAJIB gunakan tools RAG terlebih dahulu.\n* Jika hasil dari tools tidak ditemukan (tidak relevan, kosong, atau confidence rendah), jawab dengan: \"Maaf saya tidak bisa menemukan jawaban dari dokumen.\"",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        580,
        1260
      ],
      "id": "a4716c96-1d3b-4b6e-a55b-90a71d5ea087",
      "name": "chat prompt"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df66f11f-998d-4352-84f8-411cac3fc70e",
              "name": "prompt",
              "value": "=1. **Instruksi Umum**\n   Buatlah prompt yang menghasilkan hanya satu respons tanpa komentar dan tanpa baris baru. Berdasarkan input yang diberikan, hasilkan deskripsi visual yang mendetail dari permintaan secara jelas dan koheren. Hindari penggunaan tanda kutip, apostrof, atau tanda baca lainnya.\n\n2. **Spesifikasi Visual**\n\n* **Komposisi**: pertahankan tata letak yang seimbang dan harmonis di mana semua elemen (gambar, bentuk, dan teks) bekerja secara selaras. Pastikan tidak ada bagian gambar yang terasa penuh sesak, dan desain mengarahkan perhatian pemirsa secara alami. Gunakan pendekatan minimalis dengan menghindari detail berlebihan atau gangguan visual.\n\n* **Palet Warna**: pilih skema warna yang melengkapi tema secara keseluruhan dan meningkatkan suasana. Warna harus enak dipandang dan bekerja secara harmonis. Gunakan tidak lebih dari 3–4 warna utama untuk menjaga kesederhanaan dan konsistensi, serta memastikan warna tidak mendominasi desain.\n\n* **Kejelasan Visual**: gambar harus tajam dan jelas, dengan semua elemen yang dapat dibaca dan mudah diinterpretasikan. Hindari visual yang buram atau pecah. Pertahankan kontras yang kuat antar elemen kunci untuk penekanan dan kejelasan visual.\n\n* **Ukuran dan Resolusi Gambar**: gambar harus disesuaikan untuk memenuhi kebutuhan tampilan standar (misalnya media sosial, posting web). Pastikan resolusinya cukup tinggi agar tetap jelas baik di perangkat desktop maupun seluler. Gambar harus mempertahankan kualitas visual tanpa kehilangan ketajaman atau detail saat dilihat di berbagai layar.\n\n* **Daya Tarik Estetika**: usahakan desain yang tidak hanya fungsional tetapi juga menarik secara visual. Gaya keseluruhan harus modern, bersih, dan enak dipandang, dengan tampilan yang konsisten sesuai dengan suasana atau pesan yang dimaksud. Pastikan desain menyenangkan secara visual dan membangkitkan respons yang diinginkan dari pemirsa.\n\n* **Keseimbangan Visual**: pastikan elemen dalam gambar memiliki jarak yang proporsional, tanpa bagian yang terasa terlalu berat atau terlalu ringan. Ciptakan alur fokus yang alami, membimbing pandangan pemirsa melalui komposisi tanpa gangguan.\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        300,
        0
      ],
      "id": "1f6b009e-2e02-4903-b991-21a58615bb01",
      "name": "ganerate prompt",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df66f11f-998d-4352-84f8-411cac3fc70e",
              "name": "prompt",
              "value": "=1. **Aturan**\n\n* Selalu berkomunikasi secara formal, jelas, dan sopan.\n* Bersikap ringkas dan tepat, hindari detail yang tidak perlu.\n* Pertahankan nada yang positif dan profesional sebagai asisten yang andal dan berpengetahuan.\n* Hormati batasan pengguna dan hindari membahas topik yang dilarang atau tidak pantas.\n* Jadikan percakapan tetap menarik dengan mendorong partisipasi pengguna, namun saat meminta klarifikasi atau informasi tambahan, ajukan hanya satu pertanyaan terfokus agar tidak membingungkan. Hindari mengakhiri percakapan secara tiba-tiba.\n* Ikuti instruksi pengguna secara tepat.\n* Jangan menyertakan teks atau penjelasan tambahan kecuali diminta secara eksplisit.\n\n2. **Instruksi Umum**\n\n* Jika sebuah pesan tidak jelas atau kurang detail, berikan respons berdasarkan pemahaman terbaik Anda sebagai saran, dan dengan sopan minta konfirmasi atau detail tambahan jika itu bukan maksud pengguna.\n* Jika permintaan tidak pantas atau tidak relevan, tolak dengan sopan dan jelas sambil tetap menjaga rasa hormat dan profesionalisme, lalu undang pengguna untuk mengajukan permintaan yang valid.\n* Selalu ikuti aturan yang telah ditetapkan untuk menjaga profesionalisme dan ketepatan.\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        320,
        240
      ],
      "id": "78348a7a-ade6-4fa1-95ce-d366869d3499",
      "name": "other prompt",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df66f11f-998d-4352-84f8-411cac3fc70e",
              "name": "prompt",
              "value": "={{ $json.prompt }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        760,
        1260
      ],
      "id": "e4325bc6-ddd0-4cf3-972d-cbb0e4142e32",
      "name": "build prompt"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Input dari pengguna: {{ $('chatInput').item.json.chatInput }}\n\n{{ $json.prompt }}",
        "options": {
          "systemMessage": "=Anda chatbot profesional untuk perusahaan yang dirancang untuk membantu pengguna dengan komunikasi yang jelas, sopan, dan akurat. Anda memberikan respons teks yang informatif dan menghasilkan gambar hanya jika diminta secara eksplisit oleh pengguna. Gunakan riwayat percakapan yang tersedia untuk menjaga konteks dan kesinambungan. Patuhi aturan perusahaan secara ketat untuk memastikan interaksi yang tepat dan aman.Anda dapat mengobrol dengan saya untuk mendapatkan jawaban dan membuat gambar khusus berdasarkan instruksi Anda.Prioritaskan pesan relevan yang paling baru jika terdapat beberapa referensi sebelumnya. Balas dalam Bahasa Indonesia untuk semua permintaan teks (chat, otherdan generate). Jaga agar respons tetap sependek mungkin tanpa mengurangi kejelasan atau kelancaran interaksi. Jangan memaksakan interaksi lebih dari yang diperlukan untuk memberikan jawaban yang jelas."
        }
      },
      "id": "cf06091e-14ab-418f-a017-059b987acb15",
      "name": "ChatCore",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        980,
        1260
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        740,
        1500
      ],
      "id": "aafa25a9-8dd7-426c-9e49-61198b9814dd",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "TUbtLRFNULuqqBte",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1340,
        1260
      ],
      "id": "b7bdd533-d37b-4a62-b4b4-2f024034df27",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "operation": "decode",
        "token": "={{ $json.token }}",
        "options": {}
      },
      "type": "n8n-nodes-base.jwt",
      "typeVersion": 1,
      "position": [
        -900,
        1280
      ],
      "id": "6db01d02-9cf3-490a-be9d-7a1ac501284e",
      "name": "JWT",
      "credentials": {
        "jwtAuth": {
          "id": "DIKYTiCd0YBNntFq",
          "name": "JWT Auth account"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "chatInput",
              "value": "={{ $('Webhook chatbot trigger').item.json.body.chatInput }}"
            }
          ]
        },
        "options": {}
      },
      "id": "6a536c45-8b2c-412f-b947-5e5d1fabcdf5",
      "name": "chatInput",
      "type": "n8n-nodes-base.set",
      "position": [
        -320,
        1260
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6008934a-29d4-4fa0-8da9-1d17a49351cb",
              "leftValue": "={{ $json.token }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1120,
        1280
      ],
      "id": "696f0cf9-2bae-479d-842e-302a11fdf3b2",
      "name": "isToken?"
    },
    {
      "parameters": {
        "jsCode": "const now = Math.floor(Date.now() / 1000);\nconst exp = $json.payload.exp;\nreturn [\n  {\n    json: {\n      isExpired: now > exp,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -700,
        1280
      ],
      "id": "b1c3a801-23f6-4280-ac96-9ae65d876c00",
      "name": "validation exp token"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0a86cff5-bf94-432f-839c-ae3e232b4c28",
              "leftValue": "={{ $json.isExpired }}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -480,
        1280
      ],
      "id": "efb1ce26-1d1c-472d-af33-6fc44754681c",
      "name": "isToken exp?"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"Sesi anda telah berakhir, harap lakukan login terlebih dahulu\"\n}",
        "options": {
          "responseCode": 404
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -480,
        1540
      ],
      "id": "a00e98ac-5919-4346-8aee-c3967790d302",
      "name": "Response token exp"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"harap lakukan login terlebih dahulu\"\n}",
        "options": {
          "responseCode": 400
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1140,
        1560
      ],
      "id": "492db853-8dd4-47a5-8a2d-ffed8f965743",
      "name": "Response token isEmpty"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "token",
              "value": "={{ $json.headers[\"authorization\"] ? $json.headers[\"authorization\"].replace(\"Bearer \", \"\").trim() : '' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "5bdadb8f-20f0-4dc5-a8bf-5996338dfae0",
      "name": "tokenInput",
      "type": "n8n-nodes-base.set",
      "position": [
        -1140,
        1040
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        1180,
        1620
      ],
      "id": "828ee660-0e8e-45e5-ad29-c37cc382fc65",
      "name": "Embeddings Google Gemini1",
      "credentials": {
        "googlePalmApi": {
          "id": "hu7ixQhsS09un4nf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [$input.last()];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -180,
        1260
      ],
      "id": "fee3e10c-26bc-4251-afb2-04983b8c5866",
      "name": "lastPrompt"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "gunakan tools ini untuk mencari data terkait yang di tanyakan oleh user",
        "qdrantCollection": {
          "__rl": true,
          "value": "file_pdf",
          "mode": "list",
          "cachedResultName": "file_pdf"
        },
        "topK": 5,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.3,
      "position": [
        1180,
        1460
      ],
      "id": "bb447b0a-2e59-4c05-9b0a-23dc48c4396b",
      "name": "Qdrant Vector Store2",
      "credentials": {
        "qdrantApi": {
          "id": "WvMXTDUfDLp2KASV",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"Maaf saya belum bisa untuk melakukan generate gambar\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        520,
        0
      ],
      "id": "0a789c69-7c6d-49c8-b2eb-2166c0a30983",
      "name": "Respond img prompt",
      "disabled": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        900,
        220
      ],
      "id": "8a8d7377-9a16-4524-9fda-87169574c8fa",
      "name": "Google Gemini Chat Model",
      "disabled": true
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"intention\": \"chat\",\n  \"typeData\": \"text\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1060,
        220
      ],
      "id": "b7a54617-2b64-44d4-a6e5-644257008e64",
      "name": "Structured Output Parser",
      "disabled": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat-bot",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1140,
        800
      ],
      "id": "495d8cdb-9712-4d30-9e6f-6266401a6b0b",
      "name": "Webhook chatbot trigger",
      "webhookId": "e5a15a44-a6e5-4f76-b096-73ec34a96d90"
    },
    {
      "parameters": {
        "model": "llama3:latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        880,
        1500
      ],
      "id": "295c5523-eba7-48ab-ad64-88c334f6ca8d",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "d8j1hRbQJeX3SBlB",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "content": "# 📝 Note\n\n1. (NOTE) Ubah input dan responsenya sesuai dengan open web ui\n2. (CHALLANGE) Coba buat image proses yang dapat mendeskripsikan gambar\n3. (NOTE) gunakan execute workflow untuk mengarahkan jika ada file pdf, foto, dll",
        "height": 240,
        "width": 500
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -420,
        660
      ],
      "id": "20d058f2-d17d-4894-b359-8e2d502376a5",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "iYjL37grrVtj2W48",
          "mode": "list",
          "cachedResultName": "TSEL-PDF-Uploader"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -740,
        800
      ],
      "id": "a5d6c538-313c-42d0-8544-52946ba56cf3",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('sessionData').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        980,
        1620
      ],
      "id": "ccc0f43b-ea7f-4ed2-9343-87856bc84cc2",
      "name": "chat core memory"
    }
  ],
  "pinData": {},
  "connections": {
    "sessionData": {
      "main": [
        [
          {
            "node": "conversationStore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "conversationStore",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "conversationStore": {
      "main": [
        [
          {
            "node": "latestContext",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "latestContext": {
      "main": [
        [
          {
            "node": "chat prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [],
        [
          {
            "node": "ganerate prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "other prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ganerate prompt": {
      "main": [
        [
          {
            "node": "Respond img prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat prompt": {
      "main": [
        [
          {
            "node": "build prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "build prompt": {
      "main": [
        [
          {
            "node": "ChatCore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "ChatCore": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JWT": {
      "main": [
        [
          {
            "node": "validation exp token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chatInput": {
      "main": [
        [
          {
            "node": "lastPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isToken?": {
      "main": [
        [
          {
            "node": "JWT",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response token isEmpty",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validation exp token": {
      "main": [
        [
          {
            "node": "isToken exp?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isToken exp?": {
      "main": [
        [
          {
            "node": "chatInput",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response token exp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tokenInput": {
      "main": [
        [
          {
            "node": "isToken?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini1": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "lastPrompt": {
      "main": [
        [
          {
            "node": "sessionData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store2": {
      "ai_tool": [
        [
          {
            "node": "ChatCore",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "inputProcessor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "inputProcessor",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Webhook chatbot trigger": {
      "main": [
        [
          {
            "node": "tokenInput",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "ChatCore",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        []
      ]
    },
    "chat core memory": {
      "ai_memory": [
        [
          {
            "node": "ChatCore",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "98817d04-9d2c-4995-913f-653d38b4a318",
  "meta": {
    "instanceId": "bd6cd94e96dcc625bd73366095f95952b0a4a204b9d0a766da8fb9750cba033c"
  },
  "id": "SonoWb7YBmPFiuQj",
  "tags": [
    {
      "createdAt": "2025-07-14T06:33:17.571Z",
      "updatedAt": "2025-07-14T06:33:17.571Z",
      "id": "vUsdXc4dDAWxuf81",
      "name": "Tsel AI Lab"
    }
  ]
}